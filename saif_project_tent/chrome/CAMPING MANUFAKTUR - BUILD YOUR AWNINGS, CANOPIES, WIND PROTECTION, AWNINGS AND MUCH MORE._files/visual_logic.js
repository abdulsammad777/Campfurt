/**
 * Generated by Verge3D Puzzles v.3.1.1
 * Fri Jun 05 2020 20:51:17 GMT+0100 (UTC+01:00)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

_pGlob.wooProductInfo = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    
// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem[attr] = value;
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('style', ['left:','calc(',Math.round(_initGlob.percentage),'%',' ','-',' ','4vw',')'].join(''), 'beantrailer-animated', true);
  setHTMLElemAttribute('innerHTML', ['',Math.round(_initGlob.percentage),'%'].join(''), 'loading-value', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader-animated', true);
  setHTMLElemStyle('display', 'block', 'control-3d', false);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["startPreloader"] = startPreloader;
this.procedures["updatePreloader"] = updatePreloader;
this.procedures["endPreloader"] = endPreloader;
this.procedures["TRIPLE COLOR"] = TRIPLE_COLOR;
this.procedures["triple-color-stripe"] = triple_color_stripe;
this.procedures["SINGLE COLOR"] = SINGLE_COLOR;
this.procedures["single-color-stripe"] = single_color_stripe;

var Windows_doors, percentage, Environment, Front_Left, Front_Right, Front_middle, Back_Left, Back_Middle, Back_Right, Right_Left, Right_Middle, Right_Right, Left_Left, Left_Middle, Left_Right, Front_middle_resizing, Front_left_resizing, Back_left_resizing, Back_middle_resizing, Back_right_resizing, Right_left_resizing, Right_middle_resizing, Right_right_resizing, Left_left_resizing, Left_middle_resizing, Left_right_resizing, Cravane, Front_right_resizing;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = getElement(id, isParent);
    return elem ? elem[attr]: '';
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == "function")
        appInstance.renderCallbacks.push(callback);
}



// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (eventType == "mousedown") {
        var touchEventName = mouseDownUseTouchStart ? "touchstart" : "touchend";
        elem.addEventListener(touchEventName, pickListener);
    }

    var raycaster = new v3d.Raycaster();
    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        if (intersects.length > 0) {
            var obj = intersects[0].object;
            callback(obj, event);
        } else {
            callback(null, event);
        }
    }
}

// utility function used by the whenDraggedOver puzzles
function fireObjectPickingCallbacks(objName, source, index, cbParam) {
    for (var i = 0; i < source.length; i++) {
        var cb = source[i];
        if (objectsIncludeObj([cb[0]], objName)) {
            cb[index](cbParam);
        }
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenHovered puzzle
initObjectPicking(function(obj) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = obj ? getPickedObjectName(obj) : "";

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverCallbacks.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1]();
        }
    });

    _pGlob.objHoverCallbacks.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0]();
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove');



// whenHovered puzzle
function registerOnHover(objNames, callback_over, callback_out) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    _pGlob.objHoverCallbacks.push({
        objNames: objNamesFiltered,
        callbacks: [callback_over, callback_out]
    });
}



// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}



// tweenCamera puzzle
function tweenCamera(posObjName, targetObjName, duration, doSlot) {

    duration = Math.max(0, duration);

    if (!targetObjName)
        return;
    if (posObjName)
        var posObj = getObjectByName(posObjName);
    else
        var posObj = appInstance.camera;
    var targetObj = getObjectByName(targetObjName);
    if (!posObj || !targetObj)
        return;

    var wPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    var wTarget = targetObj.getWorldPosition(_pGlob.vec3Tmp2);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween)
            appInstance.controls.tween(wPos, wTarget, duration, doSlot);
    } else { // TODO: static camera, just position it for now
        if (appInstance.camera.parent)
            appInstance.camera.parent.worldToLocal(wPos);
        appInstance.camera.position.copy(wPos);
        appInstance.camera.lookAt(wTarget);
        doSlot();
    }
}



// whenClicked puzzle
initObjectPicking(function(obj) {

    // save the object for the pickedObject block
    _pGlob.pickedObject = obj ? getPickedObjectName(obj) : '';

    _pGlob.objClickCallbacks.forEach(function(el) {
        var isPicked = obj && objectsIncludeObj(el.objNames, getPickedObjectName(obj));
        el.callbacks[isPicked ? 0 : 1]();
    });
}, 'mousedown');



// whenClicked puzzle
function registerOnClick(objNames, cbDo, cbIfMissedDo) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });
    _pGlob.objClickCallbacks.push({
        objNames: objNamesFiltered,
        callbacks: [cbDo, cbIfMissedDo]
    });
}



// isObjectVisible puzzle
function isObjectVisible(objNames) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return false;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (obj.visible)
            return true;
    }
    return false;
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// objConstraintAddLimit puzzle
function objConstraintAddLimit(constraintName, objNames, mode, min, max) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj || !obj.constraints) continue;

        for (var j = obj.constraints.length - 1; j >= 0; j--) {
            if (obj.constraints[j].name == constraintName) {
                obj.constraints.splice(j, 1);
            }
        }

        var coordSystem = getCoordSystem();

        switch (mode) {
            case 'POS_X':
            case 'POS_Y':
            case 'POS_Z':
                var cons = new v3d.LimitLocationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 1 : 2);

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'POS_Y') {
                    cons.min.setComponent(compIndex, -max);
                    cons.max.setComponent(compIndex, -min);
                } else {
                    cons.min.setComponent(compIndex, min);
                    cons.max.setComponent(compIndex, max);
                }
                obj.constraints.push(cons);
                break;

            case 'ROT_X':
            case 'ROT_Y':
            case 'ROT_Z':
                var cons = new v3d.LimitRotationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Z' : 'Y');
                else
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Y' : 'Z');

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'ROT_Y') {
                    cons.min = v3d.Math.degToRad(-max);
                    cons.max = v3d.Math.degToRad(-min);
                } else {
                    cons.min = v3d.Math.degToRad(min);
                    cons.max = v3d.Math.degToRad(max);
                }

                obj.constraints.push(cons);
                break;

            case 'SCALE_X':
            case 'SCALE_Y':
            case 'SCALE_Z':
                var cons = new v3d.LimitScaleConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 1 : 2);

                cons.min.setComponent(compIndex, min);
                cons.max.setComponent(compIndex, max);
                obj.constraints.push(cons);
                break;
        }
    }
}



function intersectPlaneCSS(plane, cssX, cssY, dest) {
    var coords = _pGlob.vec2Tmp;
    var rc = _pGlob.raycasterTmp;
    coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
    coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
    rc.setFromCamera(coords, appInstance.camera);
    return rc.ray.intersectPlane(plane, dest);
}



// dragMove puzzle
function dragMove(objNames, mode, blockId, parentDragOverBlockId) {
    if (!appInstance.camera) return;

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var draggedObj = getObjectByName(info.draggedObjName);
    if (!draggedObj) return;

    if (!(blockId in _pGlob.dragMoveOrigins)) {
        _pGlob.dragMoveOrigins[blockId] = [];
    }
    var posOrigins = _pGlob.dragMoveOrigins[blockId];
    var lenDiff = objNames.length - posOrigins.length;
    for (var i = 0; i < lenDiff; i++) {
        posOrigins.push(new v3d.Vector3());
    }

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        var posOrigin = posOrigins[i];

        if (!info.isMoved) {
            // the object position before the first move is used as an initial value
            posOrigin.copy(obj.position);
        }

        var coordSystem = getCoordSystem();

        if (mode == "X" || mode == "Y" || mode == "Z") {

            if (coordSystem == 'Z_UP_RIGHT') {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "z" : "y");
            } else {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "y" : "z");
            }

            var planeNor = appInstance.camera.getWorldDirection(_pGlob.vec3Tmp);
            planeNor.cross(axis).cross(axis);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord] = posOrigin[coord] + p1[coord] - p0[coord];
            }
        } else if (mode == "XY" || mode == "XZ" || mode == "YZ") {
            if (coordSystem == 'Z_UP_RIGHT') {
                var normal = mode == "XY" ? _pGlob.AXIS_Y : (mode == "XZ" ? _pGlob.AXIS_Z : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "z" : (mode == "XZ" ? "y" : "z");
            } else {
                var normal = mode == "XY" ? _pGlob.AXIS_Z : (mode == "XZ" ? _pGlob.AXIS_Y : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "y" : (mode == "XZ" ? "z" : "z");
            }

            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(normal, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord0] = posOrigin[coord0] + p1[coord0] - p0[coord0];
                obj.position[coord1] = posOrigin[coord1] + p1[coord1] - p0[coord1];
            }
        } else if (mode == "XYZ") {
            var planeNor = appInstance.camera.getWorldDirection(_pGlob.vec3Tmp);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position.addVectors(posOrigin, p1).sub(p0);
            }
        }
        obj.updateMatrixWorld(true);
    }
}



function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}



function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}



/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}



function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}



// whenDraggedOver puzzle
initObjectPicking(function(obj, downEvent) {
    if (!obj) {
        return;
    }

    var objName = getPickedObjectName(obj);
    fireObjectPickingCallbacks(objName, _pGlob.objDragOverCallbacks, 1,
            { downEvent: downEvent, draggedObjName: objName });
}, "mousedown", true);



// whenDraggedOver puzzle
function registerOnDrag(objNames, callback_start, callback_move, callback_drop, blockId) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        callback_start();

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            callback_move();
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            callback_drop();
            info.isDowned = false;

            elem.removeEventListener("mousemove", moveCb, false);
            elem.removeEventListener("touchmove", moveCb, false);
            elem.removeEventListener("mouseup", upCb, false);
            elem.removeEventListener("touchend", upCb, false);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener("mousemove", moveCb, false);
        elem.addEventListener("touchmove", moveCb, false);
        elem.addEventListener("mouseup", upCb, false);
        elem.addEventListener("touchend", upCb, false);
    }
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        _pGlob.objDragOverCallbacks.push([objName, cb]);
    }
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



function setMorphFactor(objName, targetName, factor) {

    if (objName && targetName) {
        var obj = getObjectByName(objName);
        if (obj) {
            obj.resolveMultiMaterial().forEach(function(objR) {
                if (objR.morphTargetDictionary && targetName in objR.morphTargetDictionary) {
                    var idx = objR.morphTargetDictionary[targetName];
                    objR.morphTargetInfluences[idx] = factor;
                }
            });
        }
    }

}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}


// Describe this function...
function startPreloader() {
  setHTMLElemStyle('filter', 'blur(100px)', ['QUERYSELECTOR', '#container > canvas'], false);
  registerSetTimeout(0.1, function() {
    setHTMLElemStyle('display', 'block', 'preloader', false);
    setHTMLElemStyle('width', '0%', 'preloader_bar', false);
  });
}


// socialShareLink puzzle
function socialShareLink(media, title, text) {

    function fixedEncodeURIComponent(str) {
        return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
            return '%' + c.charCodeAt(0).toString(16);
        });
    }

    switch(media) {
    case 'TWITTER':
        return 'https://twitter.com/intent/tweet?url=' +
            fixedEncodeURIComponent(window.location.href) +
            '&text=' + fixedEncodeURIComponent(title);
    case 'FB':
        return 'http://www.facebook.com/sharer.php?u=' +
            fixedEncodeURIComponent(window.location.href);
    case 'REDDIT':
    	return 'https://reddit.com/submit?url=' +
        	fixedEncodeURIComponent(window.location.href) +
    	    '&title=' + fixedEncodeURIComponent(title);
    case 'LINKEDIN':
        return 'https://www.linkedin.com/shareArticle?mini=true&url=' +
            fixedEncodeURIComponent(window.location.href) +
     	    '&title=' + fixedEncodeURIComponent(title) +
     	    '&summary=' + fixedEncodeURIComponent(text);
    case 'VK':
        return 'http://vk.com/share.php?url=' +
            fixedEncodeURIComponent(window.location.href) +
            '&title=' + fixedEncodeURIComponent(title) +
            '&comment=' + fixedEncodeURIComponent(text);
    case 'WEIBO':
        return 'http://service.weibo.com/share/share.php?url=' +
            fixedEncodeURIComponent(window.location.href) +
            '&title=' + fixedEncodeURIComponent(title);
    }
}



// openWebPage puzzle
function openWebPage(url, mode) {

    if (appInstance.controls) {
        appInstance.controls.dispose();
        appInstance.enableControls();
    }

    if (mode == "NEW") {
        window.open(url);
    } else if (mode == "NO_RELOAD") {
        history.pushState('verge3d state', 'verge3d page', url);
    } else {
        var target;
        switch (mode) {
            case "SAME":
                target = "_self";
                break;
            case "TOP":
                target = "_top";
                break;
            case "PARENT":
                target = "_parent";
                break;
        }
        if (typeof window.PE != "undefined") {
            if (window.confirm("Are you sure you want to leave Puzzles?"))
                window.open(url, target);
        } else {
            window.open(url, target);
        }
    }
}


// Describe this function...
function updatePreloader(percentage) {
  setHTMLElemStyle('width', String(percentage) + '%', 'preloader_bar', false);
}

// Describe this function...
function endPreloader() {
  registerSetTimeout(0.1, function() {
    setHTMLElemStyle('filter', 'blur(0px)', ['QUERYSELECTOR', '#container > canvas'], false);
    setHTMLElemStyle('display', 'none', 'preloader', false);
  });
}


function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// setObjTransform puzzle
function setObjTransform(objNames, mode, x, y, z, offset) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.Math.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}



// appendScene puzzle
function appendScene(url, sceneName, loadCameras, loadLights, loadCb, progCb) {
    _pGlob.percentage = 0;

    appInstance.appendScene(url, function(loadedScene) {
        loadedScene.name = sceneName;
        _pGlob.percentage = 100;
        loadCb();
    }, function(percentage) {
        _pGlob.percentage = percentage;
        progCb();
    }, null, loadCameras, loadLights);
}



// unloadScene puzzle
function unloadScene(url) {
    if (appInstance.scene) {
        var scene = url === '' ? appInstance.scene : appInstance.scene.getObjectByName(url);
        if (scene) appInstance.unload(scene);

        if (!appInstance.scene) appInstance.renderer.clear();

        // clean object cache
        _pGlob.objCache = {};
    }
}



/**
 * Retreive standard accessible textures for MeshNodeMaterial,
 * MeshStandardMaterial or MeshPhongMaterial. If "collectSameNameMats" is true
 * then all materials in the scene with the given name will be used for collecting
 * textures, otherwise will be used only the first found material (default behavior).
 */
function matGetEditableTextures(matName, collectSameNameMats) {

    var mats = [];
    if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
    } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
            mats = [firstMat];
        }
    }

    var textures = mats.reduce(function(texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
            case 'MeshNodeMaterial':
                matTextures = Object.values(mat.nodeTextures);
                break;

            case 'MeshStandardMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                ]
                break;

            case 'MeshPhongMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.specularMap, mat.alphaMap, mat.envMap
                ];
                break;
            default:
                console.error('matGetEditableTextures: Unknown material type ' + mat.type);
                break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
    }, []);

    return textures.filter(function(elem) {
        // check Texture type exactly
        return elem && (elem.constructor == v3d.Texture || elem.constructor == v3d.DataTexture);
    });
}



// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    var textures = matGetEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    } else if (texUrlOrElem instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        var isHDR = (url.search(/\.hdr$/) > 0);

        if (!isHDR) {
            var loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            var loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(image) {
            // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
            var isJPEG = url.search(/\.(jpg|jpeg)$/) > 0 || url.search(/^data\:image\/jpeg/) === 0;

            textures.forEach(function(elem) {

                if (!isHDR) {
                    elem.image = image;
                } else {
                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(image);

                    // NOTE: reset params since the texture may be converted to float
                    elem.type = v3d.UnsignedByteType;
                    elem.encoding = v3d.RGBEEncoding;

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;

                }

                elem.format = isJPEG ? v3d.RGBFormat : v3d.RGBAFormat;
                elem.needsUpdate = true;

                // update world material if it is using this texture
                var wMat = appInstance.worldMaterial;
                if (wMat)
                    for (var texName in wMat.nodeTextures)
                        if (wMat.nodeTextures[texName] == elem)
                            appInstance.updateEnvironment(wMat);

            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        var videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        var videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            if (mat.type != 'MeshNodeMaterial')
                return;

            for (var name in mat.nodeTextures) {

                textures.forEach(function(tex) {

                    if (mat.nodeTextures[name] == tex) {
                        mat.nodeTextures[name] = videoTex;
                    }

                });

            }

            mat.needsUpdate = true;
            videoAssigned = true;
        });

        if (videoAssigned)
            doCb();

    }
}


// Describe this function...
function TRIPLE_COLOR() {
  replaceTexture('Siding-color-lenght', 'fabric-version-1.jpg', 'fabric-version-1.jpg', function() {});
  replaceTexture('Siding-color-width', 'fabric-version-1.jpg', 'fabric-version-1.jpg', function() {});
}

// Describe this function...
function triple_color_stripe() {
  replaceTexture('Stripe-color-lenght', 'fabric-version-1.jpg.001', 'fabric-version-1.jpg', function() {});
  replaceTexture('Stripe-color-width', 'fabric-version-1.jpg.001', 'fabric-version-1.jpg', function() {});
}

// Describe this function...
function SINGLE_COLOR() {
  replaceTexture('Siding-color-lenght', 'fabric-version-1.jpg', 'fabric-version-2.jpg', function() {});
  replaceTexture('Siding-color-width', 'fabric-version-1.jpg', 'fabric-version-2.jpg', function() {});
}

// Describe this function...
function single_color_stripe() {
  replaceTexture('Siding-color-lenght', 'fabric-version-1.jpg.001', 'fabric-version-2.jpg', function() {});
  replaceTexture('Siding-color-width', 'fabric-version-1.jpg.001', 'fabric-version-2.jpg', function() {});
}


function matGetColors(matName) {
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeRGBMap);
    else if (mat.isMeshStandardMaterial)
        return ['color', 'emissive'];
    else
        return [];
}



// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = matGetColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (mat === appInstance.worldMaterial)
            appInstance.updateEnvironment(mat);
    }
}



function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}



// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var colors = matGetValues(matName);

    if (colors.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = value;
        } else
            mat[valName] = value;

        if (mat === appInstance.worldMaterial)
            appInstance.updateEnvironment(mat);
    }
}



registerEveryFrame(function() {
  if (getHTMLElemAttribute('value', 'D-lenght', true) < 400) {
    changeVis(['GROUP', 'Front-Right'], false);
    changeVis(['GROUP', 'Front-Left'], false);
  }
});

registerEveryFrame(function() {
  if (getHTMLElemAttribute('value', 'D-lenght', true) < 400) {
    changeVis(['GROUP', 'Back-Right'], false);
    changeVis(['GROUP', 'Back-Left'], false);
  }
});

registerEveryFrame(function() {
  if (getHTMLElemAttribute('value', 'D-width', true) < 400) {
    changeVis(['GROUP', 'Right-Right'], false);
    changeVis(['GROUP', 'Right-Left'], false);
  }
});

registerEveryFrame(function() {
  if (getHTMLElemAttribute('value', 'D-width', true) < 400) {
    changeVis(['GROUP', 'Left-Left'], false);
    changeVis(['GROUP', 'Left-Right'], false);
  }
});

registerOnHover(['GROUP', 'Front'], function() {
  outline(_pGlob.hoveredObject, 'ENABLE');
}, function() {
  outline(_pGlob.hoveredObject, 'DISABLE');
});

registerOnHover(['GROUP', 'Back'], function() {
  outline(_pGlob.hoveredObject, 'ENABLE');
}, function() {
  outline(_pGlob.hoveredObject, 'DISABLE');
});

registerOnHover(['GROUP', 'Right'], function() {
  outline(_pGlob.hoveredObject, 'ENABLE');
}, function() {
  outline(_pGlob.hoveredObject, 'DISABLE');
});

registerOnHover(['GROUP', 'Left'], function() {
  outline(_pGlob.hoveredObject, 'ENABLE');
}, function() {
  outline(_pGlob.hoveredObject, 'DISABLE');
});

registerOnClick(['Front_Single_windows_left', 'Front_Double_windows_left', 'Front_Triple_windows_left'], function() {
  getJSFunction('openside')('front', 'window');
  tweenCamera('Camera-screenshot-3', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Front_Single_door_left', 'Front_Single_door_frame_left'], function() {
  getJSFunction('openside')('front', 'door');
  tweenCamera('Camera-screenshot-3', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Back_Single_windows_left', 'Back_Double_windows_left', 'Back_Triple_windows_left'], function() {
  getJSFunction('openside')('back', 'window');
  tweenCamera('Camera-screenshot-4', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Back_Single_door_left', 'Back_Single_door_frame_left'], function() {
  getJSFunction('openside')('back', 'door');
  tweenCamera('Camera-screenshot-4', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Right_Single_windows_left', 'Right_Double_windows_left', 'Right_Triple_windows_left'], function() {
  getJSFunction('openside')('right', 'window');
  tweenCamera('Camera-screenshot-1', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Right_Single_door_left', 'Right_Single_door_frame_left'], function() {
  getJSFunction('openside')('right', 'door');
  tweenCamera('Camera-screenshot-1', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Left_Single_windows_left', 'Left_Double_windows_left', 'Left_Triple_windows_left'], function() {
  getJSFunction('openside')('left', 'window');
  tweenCamera('Camera-screenshot-2', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Left_Single_door_left', 'Left_Single_door_frame_left'], function() {
  getJSFunction('openside')('left', 'door');
  tweenCamera('Camera-screenshot-2', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Front_Single_windows_right', 'Front_Double_windows_right', 'Front_Triple_windows_right'], function() {
  getJSFunction('openside')('front', 'window');
  tweenCamera('Camera-screenshot-3', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Front_Single_door_right', 'Front_Single_door_frame_right'], function() {
  getJSFunction('openside')('front', 'door');
  tweenCamera('Camera-screenshot-3', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Front_Single_windows_Middle', 'Front_Double_windows_Middle', 'Front_Triple_windows_Middle'], function() {
  getJSFunction('openside')('front', 'window');
  tweenCamera('Camera-screenshot-3', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Front_Single_door_Middle', 'Front_Single_door_frame_Middle'], function() {
  getJSFunction('openside')('front', 'door');
  tweenCamera('Camera-screenshot-3', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Back_Single_windows_Middle', 'Back_Double_windows_Middle', 'Back_Triple_windows_Middle'], function() {
  getJSFunction('openside')('back', 'window');
  tweenCamera('Camera-screenshot-4', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Back_Single_door_Middle', 'Back_Single_door_frame_Middle'], function() {
  getJSFunction('openside')('back', 'door');
  tweenCamera('Camera-screenshot-4', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Right_Single_windows_Middle', 'Right_Double_windows_Middle', 'Right_Triple_windows_Middle'], function() {
  getJSFunction('openside')('right', 'window');
  tweenCamera('Camera-screenshot-1', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Right_Single_door_Middle', 'Right_Single_door_frame_Middle'], function() {
  getJSFunction('openside')('right', 'door');
  tweenCamera('Camera-screenshot-1', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Left_Single_windows_Middle', 'Left_Double_windows_Middle', 'Left_Triple_windows_Middle'], function() {
  getJSFunction('openside')('left', 'window');
  tweenCamera('Camera-screenshot-2', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Left_Single_door_Middle', 'Left_Single_door_frame_Middle'], function() {
  getJSFunction('openside')('left', 'door');
  tweenCamera('Camera-screenshot-2', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Back_Single_windows_right', 'Back_Double_windows_right', 'Back_Triple_windows_right'], function() {
  getJSFunction('openside')('back', 'window');
  tweenCamera('Camera-screenshot-4', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Back_Single_door_right', 'Back_Single_door_frame_right'], function() {
  getJSFunction('openside')('back', 'door');
  tweenCamera('Camera-screenshot-4', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Right_Single_windows_right', 'Right_Double_windows_right', 'Right_Triple_windows_right'], function() {
  getJSFunction('openside')('right', 'window');
  tweenCamera('Camera-screenshot-1', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Right_Single_door_right', 'Right_Single_door_frame_right'], function() {
  getJSFunction('openside')('right', 'door');
  tweenCamera('Camera-screenshot-1', 'Origine-camera', 1, function() {});
}, function() {});

registerOnClick(['Left_Single_windows_right', 'Left_Double_windows_right', 'Left_Triple_windows_right'], function() {
  getJSFunction('openside')('left', 'window');
  tweenCamera('Camera-screenshot-2', 'Origine-camera', 1, function() {});
}, function() {});
registerOnClick(['Left_Single_door_right', 'Left_Single_door_frame_right'], function() {
  getJSFunction('openside')('left', 'door');
  tweenCamera('Camera-screenshot-2', 'Origine-camera', 1, function() {});
}, function() {});

Front_Left = ['Front_Single_door_left', 'Front_Single_door_frame_left', 'Front_Single_windows_left', 'Front_Double_windows_left', 'Front_Triple_windows_left'];

Right_Left = ['Right_Single_door_left', 'Right_Single_door_frame_left', 'Right_Single_windows_left', 'Right_Double_windows_left', 'Right_Triple_windows_left'];

Left_Left = ['Left_Single_door_left', 'Left_Single_door_frame_left', 'Left_Single_windows_left', 'Left_Double_windows_left', 'Left_Triple_windows_left'];

Front_Right = ['Front_Single_door_right', 'Front_Single_door_frame_right', 'Front_Single_windows_right', 'Front_Double_windows_right', 'Front_Triple_windows_right'];

Back_Left = ['Back_Single_door_left', 'Back_Single_door_frame_left', 'Back_Single_windows_left', 'Back_Double_windows_left', 'Back_Triple_windows_left'];

Front_middle = ['Front_Single_door_Middle', 'Front_Single_door_frame_Middle', 'Front_Single_windows_Middle', 'Front_Double_windows_Middle', 'Front_Triple_windows_Middle'];

Right_Middle = ['Right_Single_door_Middle', 'Right_Single_door_frame_Middle', 'Right_Single_windows_Middle', 'Right_Double_windows_Middle', 'Right_Triple_windows_Middle'];

Left_Middle = ['Left_Single_door_Middle', 'Left_Single_door_frame_Middle', 'Left_Single_windows_Middle', 'Left_Double_windows_Middle', 'Left_Triple_windows_Middle'];

Back_Middle = ['Back_Single_door_Middle', 'Back_Single_door_frame_Middle', 'Back_Single_windows_Middle', 'Back_Double_windows_Middle', 'Back_Triple_windows_Middle'];

Right_Right = ['Right_Single_door_right', 'Right_Single_door_frame_right', 'Right_Single_windows_right', 'Right_Double_windows_right', 'Right_Triple_windows_right'];

Back_Right = ['Back_Single_door_right', 'Back_Single_door_frame_right', 'Back_Single_windows_right', 'Back_Double_windows_right', 'Back_Triple_windows_right'];

Left_Right = ['Left_Single_door_right', 'Left_Single_door_frame_right', 'Left_Single_windows_right', 'Left_Double_windows_right', 'Left_Triple_windows_right'];

registerOnDrag(Front_middle, function() {},
            function() {
  if (isObjectVisible('Front_Triple_windows_Middle') == true) {
    objConstraintAddLimit('myConst', Front_middle, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('myConst', Front_middle, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Front_middle, 'Y', 'n$`r5z_9z_Rnc*3,;YW7', 'C%pn$;%230y5P4_:UTD,');
},
            function() {}, 'C%pn$;%230y5P4_:UTD,');
registerOnDrag(Front_Left, function() {},
            function() {
  if (isObjectVisible('Front_Triple_windows_left') == true) {
    objConstraintAddLimit('myConst', Front_Left, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('myConst', Front_Left, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Front_Left, 'Y', '5GkJlUc}k:`;N==!IS?h', 'q)(B!k0m9M]71qD0G/(Y');
},
            function() {}, 'q)(B!k0m9M]71qD0G/(Y');
registerOnDrag(Front_Right, function() {},
            function() {
  if (isObjectVisible('Front_Triple_windows_left') == true) {
    objConstraintAddLimit('myConst', Front_Right, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('myConst', Front_Right, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Front_Right, 'Y', '1+;$qTC@7oH:,-Q8N|5v', '([46QcsI(*_]Ypbzg$/*');
},
            function() {}, '([46QcsI(*_]Ypbzg$/*');

registerOnDrag(Back_Middle, function() {},
            function() {
  if (isObjectVisible('Back_Triple_windows_Middle') == true) {
    objConstraintAddLimit('Back-constraint', Back_Middle, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('Back-constraint', Back_Middle, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Back_Middle, 'Y', 'n$`r5z_9z_Rnc*3,;YW7', 'C%pn$;%230y5P4_:UTD,');
},
            function() {}, 'C%pn$;%230y5P4_:UTD,');
registerOnDrag(Back_Left, function() {},
            function() {
  if (isObjectVisible('Back_Triple_windows_left') == true) {
    objConstraintAddLimit('Back-constraint', Back_Left, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('Back-constraint', Back_Left, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Back_Left, 'Y', '5GkJlUc}k:`;N==!IS?h', 'q)(B!k0m9M]71qD0G/(Y');
},
            function() {}, 'q)(B!k0m9M]71qD0G/(Y');
registerOnDrag(Back_Right, function() {},
            function() {
  if (isObjectVisible('Back_Triple_windows_left') == true) {
    objConstraintAddLimit('Back-constraint', Back_Right, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('Back-constraint', Back_Right, 'POS_Y', (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-lenght', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Back_Right, 'Y', '1+;$qTC@7oH:,-Q8N|5v', '([46QcsI(*_]Ypbzg$/*');
},
            function() {}, '([46QcsI(*_]Ypbzg$/*');

registerOnDrag(Right_Middle, function() {},
            function() {
  if (isObjectVisible('Right_Triple_windows_Middle') == true) {
    objConstraintAddLimit('Right-constraints', Right_Middle, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('Right-constraints', Right_Middle, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Right_Middle, 'X', 'n$`r5z_9z_Rnc*3,;YW7', 'C%pn$;%230y5P4_:UTD,');
},
            function() {}, 'C%pn$;%230y5P4_:UTD,');
registerOnDrag(Right_Left, function() {},
            function() {
  if (isObjectVisible('Right_Triple_windows_left') == true) {
    objConstraintAddLimit('Right-constraints', Right_Left, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('Right-constraints', Right_Left, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Right_Left, 'X', '5GkJlUc}k:`;N==!IS?h', 'q)(B!k0m9M]71qD0G/(Y');
},
            function() {}, 'q)(B!k0m9M]71qD0G/(Y');
registerOnDrag(Right_Right, function() {},
            function() {
  if (isObjectVisible('Right_Triple_windows_left') == true) {
    objConstraintAddLimit('Right-constraints', Right_Right, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('Right-constraints', Right_Right, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Right_Right, 'X', '1+;$qTC@7oH:,-Q8N|5v', '([46QcsI(*_]Ypbzg$/*');
},
            function() {}, '([46QcsI(*_]Ypbzg$/*');

registerOnDrag(Left_Middle, function() {},
            function() {
  if (isObjectVisible('Left_Triple_windows_Middle') == true) {
    objConstraintAddLimit('Left-constraints', Left_Middle, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('Left-constraints', Left_Middle, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Left_Middle, 'X', 'n$`r5z_9z_Rnc*3,;YW7', 'C%pn$;%230y5P4_:UTD,');
},
            function() {}, 'C%pn$;%230y5P4_:UTD,');
registerOnDrag(Left_Left, function() {},
            function() {
  if (isObjectVisible('Left_Triple_windows_left') == true) {
    objConstraintAddLimit('Left-constraints', Left_Left, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('Left-constraints', Left_Left, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Left_Left, 'X', '5GkJlUc}k:`;N==!IS?h', 'q)(B!k0m9M]71qD0G/(Y');
},
            function() {}, 'q)(B!k0m9M]71qD0G/(Y');
registerOnDrag(Left_Right, function() {},
            function() {
  if (isObjectVisible('Left_Triple_windows_left') == true) {
    objConstraintAddLimit('Left-constraints', Left_Right, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 190) / 100) / 2) * 1);
  } else {
    objConstraintAddLimit('Left-constraints', Left_Right, 'POS_X', (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * -1, (((getHTMLElemAttribute('value', 'D-width', true) - 110) / 100) / 2) * 1);
  }
  dragMove(Left_Right, 'X', '1+;$qTC@7oH:,-Q8N|5v', '([46QcsI(*_]Ypbzg$/*');
},
            function() {}, '([46QcsI(*_]Ypbzg$/*');

eventHTMLElem('click', 'front-blank-layout', true, function(event) {
  changeVis(['GROUP', 'Front'], false);
});
eventHTMLElem('click', 'front-left-door-right-windows', true, function(event) {
  changeVis(['GROUP', 'Front-Right'], false);
  changeVis(['GROUP', 'Front-Middle'], false);
  changeVis(['GROUP', 'Front-Left'], false);
  changeVis('Front_Single_door_left', true);
  changeVis('Front_Single_door_frame_left', true);
  changeVis('Front_Single_windows_Middle', true);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'Front-three-windows', true, function(event) {
  changeVis(['GROUP', 'Front-Right'], false);
  changeVis(['GROUP', 'Front-Middle'], false);
  changeVis(['GROUP', 'Front-Left'], false);
  changeVis('Front_Single_door_frame_Middle', false);
  changeVis('Front_Single_windows_left', true);
  changeVis('Front_Single_door_frame_left', false);
  changeVis('Front_Single_door_frame_right', false);
  changeVis('Front_Single_windows_Middle', true);
  changeVis('Front_Single_windows_right', true);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Front_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_left', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Front_Single_windows_right', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_right', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'back-blank-layout', true, function(event) {
  changeVis(['GROUP', 'Back'], false);
});
eventHTMLElem('click', 'back-left-door-right-windows', true, function(event) {
  changeVis(['GROUP', 'Back-Right'], false);
  changeVis(['GROUP', 'Back-Middle'], false);
  changeVis(['GROUP', 'Back-Left'], false);
  changeVis('Back_Single_door_left', true);
  changeVis('Back_Single_door_frame_left', true);
  changeVis('Back_Single_windows_Middle', true);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'back-three-windows', true, function(event) {
  changeVis(['GROUP', 'Back-Right'], false);
  changeVis(['GROUP', 'Back-Middle'], false);
  changeVis(['GROUP', 'Back-Left'], false);
  changeVis('Back_Single_door_frame_Middle', false);
  changeVis('Back_Single_door_frame_left', false);
  changeVis('Back_Single_door_frame_right', false);
  changeVis('Back_Single_windows_left', true);
  changeVis('Back_Single_windows_Middle', true);
  changeVis('Back_Single_windows_right', true);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Back_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_left', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Back_Single_windows_right', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_right', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'right-blank-layout', true, function(event) {
  changeVis(['GROUP', 'Right'], false);
});
eventHTMLElem('click', 'right-left-door-middle-windows', true, function(event) {
  changeVis(['GROUP', 'Right-Right'], false);
  changeVis(['GROUP', 'Right-Middle'], false);
  changeVis(['GROUP', 'Right-Left'], false);
  changeVis('Right_Single_door_left', true);
  changeVis('Right_Single_door_frame_left', true);
  changeVis('Right_Single_windows_Middle', true);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'right-three-windows', true, function(event) {
  changeVis(['GROUP', 'Right-Right'], false);
  changeVis(['GROUP', 'Right-Middle'], false);
  changeVis(['GROUP', 'Right-Left'], false);
  changeVis('Right_Single_windows_left', true);
  changeVis('Right_Single_windows_Middle', true);
  changeVis('Right_Single_windows_right', true);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Right_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_left', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Right_Single_windows_right', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_right', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'left-blank-layout', true, function(event) {
  changeVis(['GROUP', 'Left'], false);
});
eventHTMLElem('click', 'left-left-door-middle-windows', true, function(event) {
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis(['GROUP', 'Left-Middle'], false);
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis('Left_Single_door_left', true);
  changeVis('Left_Single_door_frame_left', true);
  changeVis('Left_Single_windows_Middle', true);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'left-three-windows', true, function(event) {
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis(['GROUP', 'Left-Middle'], false);
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis('Left_Single_windows_left', true);
  changeVis('Left_Single_windows_Middle', true);
  changeVis('Left_Single_windows_right', true);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Left_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_left', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Left_Single_windows_right', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_right', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'front-middle-door', true, function(event) {
  changeVis(['GROUP', 'Front-Right'], false);
  changeVis(['GROUP', 'Front-Left'], false);
  changeVis(['GROUP', 'Front-Middle'], false);
  changeVis('Front_Single_door_Middle', true);
  changeVis('Front_Single_door_frame_Middle', true);
});
eventHTMLElem('click', 'front-double-windows', true, function(event) {
  changeVis(['GROUP', 'Front-Right'], false);
  changeVis(['GROUP', 'Front-Middle'], false);
  changeVis(['GROUP', 'Front-Left'], false);
  changeVis('Front_Single_windows_left', true);
  changeVis('Front_Single_windows_Middle', true);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Front_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_left', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'Front-door-right-window-middle', true, function(event) {
  changeVis(['GROUP', 'Front-Right'], false);
  changeVis(['GROUP', 'Front-Middle'], false);
  changeVis(['GROUP', 'Front-Left'], false);
  changeVis('Front_Single_windows_left', true);
  changeVis('Front_Single_door_Middle', true);
  changeVis('Front_Single_door_frame_Middle', true);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'back-middle-door', true, function(event) {
  changeVis(['GROUP', 'Back-Right'], false);
  changeVis(['GROUP', 'Back-Left'], false);
  changeVis(['GROUP', 'Back-Middle'], false);
  changeVis('Back_Single_door_Middle', true);
  changeVis('Back_Single_door_frame_Middle', true);
});
eventHTMLElem('click', 'back-double-windows', true, function(event) {
  changeVis(['GROUP', 'Back-Right'], false);
  changeVis(['GROUP', 'Back-Middle'], false);
  changeVis(['GROUP', 'Back-Left'], false);
  changeVis('Back_Single_windows_left', true);
  changeVis('Back_Single_windows_Middle', true);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Back_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_left', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'back-door-right-window-middle', true, function(event) {
  changeVis(['GROUP', 'Back-Right'], false);
  changeVis(['GROUP', 'Back-Middle'], false);
  changeVis(['GROUP', 'Back-Left'], false);
  changeVis('Back_Single_windows_left', true);
  changeVis('Back_Single_door_Middle', true);
  changeVis('Back_Single_door_frame_Middle', true);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'right-single-door', true, function(event) {
  changeVis(['GROUP', 'Right-Right'], false);
  changeVis(['GROUP', 'Right-Left'], false);
  changeVis(['GROUP', 'Right-Middle'], false);
  changeVis('Right_Single_door_Middle', true);
  changeVis('Right_Single_door_frame_Middle', true);
});
eventHTMLElem('click', 'right-double-windows', true, function(event) {
  changeVis(['GROUP', 'Right-Right'], false);
  changeVis(['GROUP', 'Right-Middle'], false);
  changeVis(['GROUP', 'Right-Left'], false);
  changeVis('Right_Single_windows_left', true);
  changeVis('Right_Single_windows_Middle', true);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Right_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_left', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'right-door-right-window-middle', true, function(event) {
  changeVis(['GROUP', 'Right-Right'], false);
  changeVis(['GROUP', 'Right-Middle'], false);
  changeVis(['GROUP', 'Right-Left'], false);
  changeVis('Right_Single_windows_left', true);
  changeVis('Right_Single_door_Middle', true);
  changeVis('Right_Single_door_frame_Middle', true);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'left-single-door', true, function(event) {
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis(['GROUP', 'Left-Middle'], false);
  changeVis('Left_Single_door_Middle', true);
  changeVis('Left_Single_door_frame_Middle', true);
});
eventHTMLElem('click', 'left-double-windows', true, function(event) {
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis(['GROUP', 'Left-Middle'], false);
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis('Left_Single_windows_left', true);
  changeVis('Left_Single_windows_Middle', true);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Left_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_left', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'left-door-right-window-middle', true, function(event) {
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis(['GROUP', 'Left-Middle'], false);
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis('Left_Single_windows_left', true);
  changeVis('Left_Single_door_Middle', true);
  changeVis('Left_Single_door_frame_Middle', true);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'right-single-windows', true, function(event) {
  changeVis(['GROUP', 'Right-Right'], false);
  changeVis(['GROUP', 'Right-Left'], false);
  changeVis(['GROUP', 'Right-Middle'], false);
  changeVis('Right_Single_windows_Middle', true);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'right-double-windows-door', true, function(event) {
  changeVis(['GROUP', 'Right-Right'], false);
  changeVis(['GROUP', 'Right-Middle'], false);
  changeVis(['GROUP', 'Right-Left'], false);
  changeVis('Right_Single_windows_left', true);
  changeVis('Right_Single_door_Middle', true);
  changeVis('Right_Single_door_frame_Middle', true);
  changeVis('Right_Single_windows_right', true);
  setMorphFactor('Right_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_left', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Right_Single_windows_right', 'Single-windows-height-scale', 0);
  setMorphFactor('Right_Single_windows_right', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'left-single-windows', true, function(event) {
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis(['GROUP', 'Left-Middle'], false);
  changeVis('Left_Single_windows_Middle', true);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'left-double-windows-door', true, function(event) {
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis(['GROUP', 'Left-Middle'], false);
  changeVis(['GROUP', 'Left-Left'], false);
  changeVis('Left_Single_windows_left', true);
  changeVis('Left_Single_door_Middle', true);
  changeVis('Left_Single_door_frame_Middle', true);
  changeVis('Left_Single_windows_right', true);
  setMorphFactor('Left_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_left', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Left_Single_windows_right', 'Single-windows-height-scale', 0);
  setMorphFactor('Left_Single_windows_right', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'front-single-windows', true, function(event) {
  changeVis(['GROUP', 'Front-Right'], false);
  changeVis(['GROUP', 'Front-Left'], false);
  changeVis(['GROUP', 'Front-Middle'], false);
  changeVis('Front_Single_windows_Middle', true);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'front-double-windows-door', true, function(event) {
  changeVis(['GROUP', 'Front-Right'], false);
  changeVis(['GROUP', 'Front-Middle'], false);
  changeVis(['GROUP', 'Front-Left'], false);
  changeVis('Front_Single_windows_left', true);
  changeVis('Front_Single_door_Middle', true);
  changeVis('Front_Single_door_frame_Middle', true);
  changeVis('Front_Single_windows_right', true);
  setMorphFactor('Front_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_left', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Front_Single_windows_right', 'Single-windows-height-scale', 0);
  setMorphFactor('Front_Single_windows_right', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('click', 'back-single-windows', true, function(event) {
  changeVis(['GROUP', 'Back-Right'], false);
  changeVis(['GROUP', 'Back-Left'], false);
  changeVis(['GROUP', 'Back-Middle'], false);
  changeVis('Back_Single_windows_Middle', true);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
});
eventHTMLElem('click', 'back-double-windows-door', true, function(event) {
  changeVis(['GROUP', 'Back-Right'], false);
  changeVis(['GROUP', 'Back-Middle'], false);
  changeVis(['GROUP', 'Back-Left'], false);
  changeVis('Back_Single_windows_left', true);
  changeVis('Back_Single_door_Middle', true);
  changeVis('Back_Single_door_frame_Middle', true);
  changeVis('Back_Single_windows_right', true);
  setMorphFactor('Back_Single_windows_left', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_left', 'Single-windows-width-scale', -0.46);
  setMorphFactor('Back_Single_windows_right', 'Single-windows-height-scale', 0);
  setMorphFactor('Back_Single_windows_right', 'Single-windows-width-scale', -0.46);
});

eventHTMLElem('change', 'front-left-window', true, function(event) {
  setMorphFactor('Front_Triple_windows_left', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  Front_left_resizing = getHTMLElemAttribute('value', 'front-left-window', true);
  if (Front_left_resizing == 'Single') {
    changeVis('Front_Single_windows_left', true);
    changeVis('Front_Double_windows_left', false);
    changeVis('Front_Triple_windows_left', false);
  }
  if (Front_left_resizing == 'Double') {
    changeVis('Front_Double_windows_left', true);
    changeVis('Front_Single_windows_left', false);
    changeVis('Front_Triple_windows_left', false);
  }
  if (Front_left_resizing == 'Triple') {
    changeVis('Front_Triple_windows_left', true);
    changeVis('Front_Single_windows_left', false);
    changeVis('Front_Double_windows_left', false);
  }
});
eventHTMLElem('change', 'front-windows-single', true, function(event) {
  Front_left_resizing = getHTMLElemAttribute('value', 'front-windows-single', true);
  if (Front_left_resizing == '120x104') {
    setMorphFactor('Front_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_left', 'Single-windows-width-scale', -0.46);
  }
  if (Front_left_resizing == '120x124') {
    setMorphFactor('Front_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_left', 'Single-windows-width-scale', -0.12);
  }
  if (Front_left_resizing == '120x154') {
    setMorphFactor('Front_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_left', 'Single-windows-width-scale', 0.527343);
  }
  if (Front_left_resizing == '120x204') {
    setMorphFactor('Front_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_left', 'Single-windows-width-scale', 1.521739);
  }
  if (Front_left_resizing == '120x254') {
    setMorphFactor('Front_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_left', 'Single-windows-width-scale', 2.5);
  }
  if (Front_left_resizing == '200x94') {
    setMorphFactor('Front_Single_windows_left', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Front_Single_windows_left', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'front-windows-double', true, function(event) {
  Front_left_resizing = getHTMLElemAttribute('value', 'front-windows-double', true);
  if (Front_left_resizing == '120x194') {
    setMorphFactor('Front_Double_windows_left', 'Front-Double-windows-height-scale', 1.356522);
    setMorphFactor('Front_Double_windows_left', 'Front-Double-windows-width-scale', 0.830918);
  }
  if (Front_left_resizing == '120x204') {
    setMorphFactor('Front_Double_windows_left', 'Front-Double-windows-height-scale', 1.356522);
    setMorphFactor('Front_Double_windows_left', 'Front-Double-windows-width-scale', 1.043478);
  }
  if (Front_left_resizing == '90x154') {
    setMorphFactor('Front_Double_windows_left', 'Front-Double-windows-height-scale', 1.356522);
    setMorphFactor('Front_Double_windows_left', 'Front-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'front-windows-triple', true, function(event) {
  Front_left_resizing = getHTMLElemAttribute('value', 'front-windows-triple', true);
  if (Front_left_resizing == '120x254') {
    setMorphFactor('Front_Triple_windows_left', 'Triple_windows', -1.681159);
  }
  if (Front_left_resizing == '120x304') {
    setMorphFactor('Front_Triple_windows_left', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'back-left-window', true, function(event) {
  Back_left_resizing = getHTMLElemAttribute('value', 'back-left-window', true);
  if (Back_left_resizing == 'Single') {
    changeVis('Back_Single_windows_left', true);
    changeVis('Back_Double_windows_left', false);
    changeVis('Back_Triple_windows_left', false);
  }
  if (Back_left_resizing == 'Double') {
    changeVis('Back_Double_windows_left', true);
    changeVis('Back_Single_windows_left', false);
    changeVis('Back_Triple_windows_left', false);
  }
  if (Back_left_resizing == 'Triple') {
    changeVis('Back_Triple_windows_left', true);
    changeVis('Back_Single_windows_left', false);
    changeVis('Back_Double_windows_left', false);
  }
});
eventHTMLElem('change', 'back-windows-single', true, function(event) {
  Back_left_resizing = getHTMLElemAttribute('value', 'back-windows-single', true);
  if (Back_left_resizing == '120x104') {
    setMorphFactor('Back_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_left', 'Single-windows-width-scale', -0.46);
  }
  if (Back_left_resizing == '120x124') {
    setMorphFactor('Back_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_left', 'Single-windows-width-scale', -0.12);
  }
  if (Back_left_resizing == '120x154') {
    setMorphFactor('Back_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_left', 'Single-windows-width-scale', 0.527343);
  }
  if (Back_left_resizing == '120x204') {
    setMorphFactor('Back_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_left', 'Single-windows-width-scale', 1.521739);
  }
  if (Back_left_resizing == '120x254') {
    setMorphFactor('Back_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_left', 'Single-windows-width-scale', 2.5);
  }
  if (Back_left_resizing == '200x94') {
    setMorphFactor('Back_Single_windows_left', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Back_Single_windows_left', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'back-windows-double', true, function(event) {
  Back_left_resizing = getHTMLElemAttribute('value', 'back-windows-double', true);
  if (Back_left_resizing == '120x194') {
    setMorphFactor('Back_Double_windows_left', 'Back-Double-windows-height-scale', 1.356522);
    setMorphFactor('Back_Double_windows_left', 'Back-Double-windows-width-scale', 0.830918);
  }
  if (Back_left_resizing == '120x204') {
    setMorphFactor('Back_Double_windows_left', 'Back-Double-windows-height-scale', 1.356522);
    setMorphFactor('Back_Double_windows_left', 'Back-Double-windows-width-scale', 1.043478);
  }
  if (Back_left_resizing == '90x154') {
    setMorphFactor('Back_Double_windows_left', 'Back-Double-windows-height-scale', 1.356522);
    setMorphFactor('Back_Double_windows_left', 'Back-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'back-windows-triple', true, function(event) {
  Back_left_resizing = getHTMLElemAttribute('value', 'back-windows-triple', true);
  if (Back_left_resizing == '120x254') {
    setMorphFactor('Back_Triple_windows_left', 'Triple_windows', -1.681159);
  }
  if (Back_left_resizing == '120x304') {
    setMorphFactor('Back_Triple_windows_left', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'right-left-window', true, function(event) {
  Right_left_resizing = getHTMLElemAttribute('value', 'right-left-window', true);
  if (Right_left_resizing == 'Single') {
    changeVis('Right_Single_windows_left', true);
    changeVis('Right_Double_windows_left', false);
    changeVis('Right_Triple_windows_left', false);
  }
  if (Right_left_resizing == 'Double') {
    changeVis('Right_Double_windows_left', true);
    changeVis('Right_Single_windows_left', false);
    changeVis('Right_Triple_windows_left', false);
  }
  if (Right_left_resizing == 'Triple') {
    changeVis('Right_Triple_windows_left', true);
    changeVis('Right_Single_windows_left', false);
    changeVis('Right_Double_windows_left', false);
  }
});
eventHTMLElem('change', 'right-windows-single', true, function(event) {
  Right_left_resizing = getHTMLElemAttribute('value', 'right-windows-single', true);
  if (Right_left_resizing == '120x104') {
    setMorphFactor('Right_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_left', 'Single-windows-width-scale', -0.46);
  }
  if (Right_left_resizing == '120x124') {
    setMorphFactor('Right_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_left', 'Single-windows-width-scale', -0.12);
  }
  if (Right_left_resizing == '120x154') {
    setMorphFactor('Right_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_left', 'Single-windows-width-scale', 0.527343);
  }
  if (Right_left_resizing == '120x204') {
    setMorphFactor('Right_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_left', 'Single-windows-width-scale', 1.521739);
  }
  if (Right_left_resizing == '120x254') {
    setMorphFactor('Right_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_left', 'Single-windows-width-scale', 2.5);
  }
  if (Back_left_resizing == '200x94') {
    setMorphFactor('Right_Single_windows_left', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Right_Single_windows_left', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'right-windows-double', true, function(event) {
  Right_left_resizing = getHTMLElemAttribute('value', 'right-windows-double', true);
  if (Right_left_resizing == '120x194') {
    setMorphFactor('Right_Double_windows_left', 'Right-Double-windows-height-scale', 1.356522);
    setMorphFactor('Right_Double_windows_left', 'Right-Double-windows-width-scale', 0.830918);
  }
  if (Right_left_resizing == '120x204') {
    setMorphFactor('Right_Double_windows_left', 'Right-Double-windows-height-scale', 1.356522);
    setMorphFactor('Right_Double_windows_left', 'Right-Double-windows-width-scale', 1.043478);
  }
  if (Right_left_resizing == '90x154') {
    setMorphFactor('Right_Double_windows_left', 'Right-Double-windows-height-scale', 1.356522);
    setMorphFactor('Right_Double_windows_left', 'Right-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'right-windows-triple', true, function(event) {
  Right_left_resizing = getHTMLElemAttribute('value', 'right-windows-triple', true);
  if (Right_left_resizing == '120x254') {
    setMorphFactor('Right_Triple_windows_left', 'Triple_windows', -1.681159);
  }
  if (Right_left_resizing == '120x304') {
    setMorphFactor('Right_Triple_windows_left', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'left-left-window', true, function(event) {
  Left_left_resizing = getHTMLElemAttribute('value', 'left-left-window', true);
  if (Left_left_resizing == 'Single') {
    changeVis('Left_Single_windows_left', true);
    changeVis('Left_Double_windows_left', false);
    changeVis('Left_Triple_windows_left', false);
  }
  if (Left_left_resizing == 'Double') {
    changeVis('Left_Double_windows_left', true);
    changeVis('Left_Single_windows_left', false);
    changeVis('Left_Triple_windows_left', false);
  }
  if (Left_left_resizing == 'Triple') {
    changeVis('Left_Triple_windows_left', true);
    changeVis('Left_Single_windows_left', false);
    changeVis('Left_Double_windows_left', false);
  }
});
eventHTMLElem('change', 'left-windows-single', true, function(event) {
  Left_left_resizing = getHTMLElemAttribute('value', 'left-windows-single', true);
  if (Left_left_resizing == '120x104') {
    setMorphFactor('Left_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_left', 'Single-windows-width-scale', -0.46);
  }
  if (Left_left_resizing == '120x124') {
    setMorphFactor('Left_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_left', 'Single-windows-width-scale', -0.12);
  }
  if (Left_left_resizing == '120x154') {
    setMorphFactor('Left_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_left', 'Single-windows-width-scale', 0.527343);
  }
  if (Left_left_resizing == '120x204') {
    setMorphFactor('Left_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_left', 'Single-windows-width-scale', 1.521739);
  }
  if (Left_left_resizing == '120x254') {
    setMorphFactor('Left_Single_windows_left', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_left', 'Single-windows-width-scale', 2.5);
  }
  if (Left_left_resizing == '200x94') {
    setMorphFactor('Left_Single_windows_left', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Left_Single_windows_left', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'left-windows-double', true, function(event) {
  Left_left_resizing = getHTMLElemAttribute('value', 'left-windows-double', true);
  if (Left_left_resizing == '120x194') {
    setMorphFactor('Left_Double_windows_left', 'Left-Double-windows-height-scale', 1.356522);
    setMorphFactor('Left_Double_windows_left', 'Left-Double-windows-width-scale', 0.830918);
  }
  if (Left_left_resizing == '120x204') {
    setMorphFactor('Left_Double_windows_left', 'Left-Double-windows-height-scale', 1.356522);
    setMorphFactor('Left_Double_windows_left', 'Left-Double-windows-width-scale', 1.043478);
  }
  if (Left_left_resizing == '90x154') {
    setMorphFactor('Left_Double_windows_left', 'Left-Double-windows-height-scale', 1.356522);
    setMorphFactor('Left_Double_windows_left', 'Left-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'left-windows-triple', true, function(event) {
  Left_left_resizing = getHTMLElemAttribute('value', 'left-windows-triple', true);
  if (Left_left_resizing == '120x254') {
    setMorphFactor('Left_Triple_windows_left', 'Triple_windows', -1.681159);
  }
  if (Left_left_resizing == '120x304') {
    setMorphFactor('Left_Triple_windows_left', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'front-middle-window', true, function(event) {
  Front_middle_resizing = getHTMLElemAttribute('value', 'front-middle-window', true);
  if (Front_middle_resizing == 'Single') {
    changeVis('Front_Single_windows_Middle', true);
    changeVis('Front_Double_windows_Middle', false);
    changeVis('Front_Triple_windows_Middle', false);
  }
  if (Front_middle_resizing == 'Double') {
    changeVis('Front_Double_windows_Middle', true);
    changeVis('Front_Single_windows_Middle', false);
    changeVis('Front_Triple_windows_Middle', false);
  }
  if (Front_middle_resizing == 'Triple') {
    changeVis('Front_Triple_windows_Middle', true);
    changeVis('Front_Single_windows_Middle', false);
    changeVis('Front_Double_windows_Middle', false);
  }
});
eventHTMLElem('change', 'front-windows-single-1', true, function(event) {
  Front_middle_resizing = getHTMLElemAttribute('value', 'front-windows-single-1', true);
  if (Front_middle_resizing == '120x104') {
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  }
  if (Front_middle_resizing == '120x124') {
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', -0.12);
  }
  if (Front_middle_resizing == '120x154') {
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', 0.527343);
  }
  if (Front_middle_resizing == '120x204') {
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', 1.521739);
  }
  if (Front_middle_resizing == '120x254') {
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', 2.5);
  }
  if (Front_middle_resizing == '200x94') {
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'front-windows-double-1', true, function(event) {
  Front_middle_resizing = getHTMLElemAttribute('value', 'front-windows-double-1', true);
  if (Front_middle_resizing == '120x194') {
    setMorphFactor('Front_Double_windows_Middle', 'Front-Double-windows-height-scale', 1.356522);
    setMorphFactor('Front_Double_windows_Middle', 'Front-Double-windows-width-scale', 0.830918);
  }
  if (Front_middle_resizing == '120x204') {
    setMorphFactor('Front_Double_windows_Middle', 'Front-Double-windows-height-scale', 1.356522);
    setMorphFactor('Front_Double_windows_Middle', 'Front-Double-windows-width-scale', 1.043478);
  }
  if (Front_middle_resizing == '90x154') {
    setMorphFactor('Front_Double_windows_Middle', 'Front-Double-windows-height-scale', 1.356522);
    setMorphFactor('Front_Double_windows_Middle', 'Front-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'front-windows-triple-1', true, function(event) {
  Front_middle_resizing = getHTMLElemAttribute('value', 'front-windows-triple-1', true);
  if (Front_middle_resizing == '120x254') {
    setMorphFactor('Front_Triple_windows_Middle', 'Triple_windows', -1.681159);
  }
  if (Front_middle_resizing == '120x304') {
    setMorphFactor('Front_Triple_windows_Middle', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'back-middle-window', true, function(event) {
  Back_middle_resizing = getHTMLElemAttribute('value', 'back-middle-window', true);
  if (Front_middle_resizing == 'Single') {
    changeVis('Back_Single_windows_Middle', true);
    changeVis('Back_Double_windows_Middle', false);
    changeVis('Back_Triple_windows_Middle', false);
  }
  if (Back_middle_resizing == 'Double') {
    changeVis('Back_Double_windows_Middle', true);
    changeVis('Back_Single_windows_Middle', false);
    changeVis('Back_Triple_windows_Middle', false);
  }
  if (Back_middle_resizing == 'Triple') {
    changeVis('Back_Triple_windows_Middle', true);
    changeVis('Back_Single_windows_Middle', false);
    changeVis('Back_Double_windows_Middle', false);
  }
});
eventHTMLElem('change', 'back-windows-single-1', true, function(event) {
  Back_middle_resizing = getHTMLElemAttribute('value', 'back-windows-single-1', true);
  if (Back_middle_resizing == '120x104') {
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  }
  if (Back_middle_resizing == '120x124') {
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', -0.12);
  }
  if (Back_middle_resizing == '120x154') {
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', 0.527343);
  }
  if (Back_middle_resizing == '120x204') {
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', 1.521739);
  }
  if (Back_middle_resizing == '120x254') {
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', 2.5);
  }
  if (Back_middle_resizing == '200x94') {
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'back-windows-double-1', true, function(event) {
  Back_middle_resizing = getHTMLElemAttribute('value', 'back-windows-double-1', true);
  if (Back_middle_resizing == '120x194') {
    setMorphFactor('Back_Double_windows_Middle', 'Back-Double-windows-height-scale', 1.356522);
    setMorphFactor('Back_Double_windows_Middle', 'Back-Double-windows-width-scale', 0.830918);
  }
  if (Back_middle_resizing == '120x204') {
    setMorphFactor('Back_Double_windows_Middle', 'Back-Double-windows-height-scale', 1.356522);
    setMorphFactor('Back_Double_windows_Middle', 'Back-Double-windows-width-scale', 1.043478);
  }
  if (Back_middle_resizing == '90x154') {
    setMorphFactor('Back_Double_windows_Middle', 'Back-Double-windows-height-scale', 1.356522);
    setMorphFactor('Back_Double_windows_Middle', 'Back-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'back-windows-triple-1', true, function(event) {
  Back_middle_resizing = getHTMLElemAttribute('value', 'back-windows-triple-1', true);
  if (Back_middle_resizing == '120x254') {
    setMorphFactor('Back_Triple_windows_Middle', 'Triple_windows', -1.681159);
  }
  if (Back_middle_resizing == '120x304') {
    setMorphFactor('Back_Triple_windows_Middle', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'right-middle-window', true, function(event) {
  Right_middle_resizing = getHTMLElemAttribute('value', 'right-middle-window', true);
  if (Right_middle_resizing == 'Single') {
    changeVis('Right_Single_windows_Middle', true);
    changeVis('Right_Double_windows_Middle', false);
    changeVis('Right_Triple_windows_Middle', false);
  }
  if (Right_middle_resizing == 'Double') {
    changeVis('Right_Double_windows_Middle', true);
    changeVis('Right_Single_windows_Middle', false);
    changeVis('Right_Triple_windows_Middle', false);
  }
  if (Right_middle_resizing == 'Triple') {
    changeVis('Right_Triple_windows_Middle', true);
    changeVis('Right_Single_windows_Middle', false);
    changeVis('Right_Double_windows_Middle', false);
  }
});
eventHTMLElem('change', 'right-windows-single-1', true, function(event) {
  Right_middle_resizing = getHTMLElemAttribute('value', 'right-windows-single-1', true);
  if (Right_middle_resizing == '120x104') {
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  }
  if (Right_middle_resizing == '120x124') {
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', -0.12);
  }
  if (Right_middle_resizing == '120x154') {
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', 0.527343);
  }
  if (Right_middle_resizing == '120x204') {
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', 1.521739);
  }
  if (Right_middle_resizing == '120x254') {
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', 2.5);
  }
  if (Right_middle_resizing == '200x94') {
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'right-windows-double-1', true, function(event) {
  Right_middle_resizing = getHTMLElemAttribute('value', 'right-windows-double-1', true);
  if (Right_middle_resizing == '120x194') {
    setMorphFactor('Right_Double_windows_Middle', 'Right-Double-windows-height-scale', 1.356522);
    setMorphFactor('Right_Double_windows_Middle', 'Right-Double-windows-width-scale', 0.830918);
  }
  if (Right_middle_resizing == '120x204') {
    setMorphFactor('Right_Double_windows_Middle', 'Right-Double-windows-height-scale', 1.356522);
    setMorphFactor('Right_Double_windows_Middle', 'Right-Double-windows-width-scale', 1.043478);
  }
  if (Right_middle_resizing == '90x154') {
    setMorphFactor('Right_Double_windows_Middle', 'Right-Double-windows-height-scale', 1.356522);
    setMorphFactor('Right_Double_windows_Middle', 'Right-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'right-windows-triple-1', true, function(event) {
  Right_middle_resizing = getHTMLElemAttribute('value', 'right-windows-triple-1', true);
  if (Right_middle_resizing == '120x254') {
    setMorphFactor('Right_Triple_windows_Middle', 'Triple_windows', -1.681159);
  }
  if (Right_middle_resizing == '120x304') {
    setMorphFactor('Right_Triple_windows_Middle', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'left-middle-window', true, function(event) {
  Left_middle_resizing = getHTMLElemAttribute('value', 'left-middle-window', true);
  if (Left_middle_resizing == 'Single') {
    changeVis('Left_Single_windows_Middle', true);
    changeVis('Left_Double_windows_Middle', false);
    changeVis('Left_Triple_windows_Middle', false);
  }
  if (Left_middle_resizing == 'Double') {
    changeVis('Left_Double_windows_Middle', true);
    changeVis('Left_Single_windows_Middle', false);
    changeVis('Left_Triple_windows_Middle', false);
  }
  if (Left_middle_resizing == 'Triple') {
    changeVis('Left_Triple_windows_Middle', true);
    changeVis('Left_Single_windows_Middle', false);
    changeVis('Left_Double_windows_Middle', false);
  }
});
eventHTMLElem('change', 'left-windows-single-1', true, function(event) {
  Left_middle_resizing = getHTMLElemAttribute('value', 'left-windows-single-1', true);
  if (Left_middle_resizing == '120x104') {
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', -0.46);
  }
  if (Left_middle_resizing == '120x124') {
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', -0.12);
  }
  if (Left_middle_resizing == '120x154') {
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', 0.527343);
  }
  if (Left_middle_resizing == '120x204') {
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', 1.521739);
  }
  if (Left_middle_resizing == '120x254') {
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', 2.5);
  }
  if (Left_middle_resizing == '200x94') {
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'left-windows-double-1', true, function(event) {
  Left_middle_resizing = getHTMLElemAttribute('value', 'left-windows-double-1', true);
  if (Left_middle_resizing == '120x194') {
    setMorphFactor('Left_Double_windows_Middle', 'Left-Double-windows-height-scale', 1.356522);
    setMorphFactor('Left_Double_windows_Middle', 'Left-Double-windows-width-scale', 0.830918);
  }
  if (Left_middle_resizing == '120x204') {
    setMorphFactor('Left_Double_windows_Middle', 'Left-Double-windows-height-scale', 1.356522);
    setMorphFactor('Left_Double_windows_Middle', 'Left-Double-windows-width-scale', 1.043478);
  }
  if (Left_middle_resizing == '90x154') {
    setMorphFactor('Left_Double_windows_Middle', 'Left-Double-windows-height-scale', 1.356522);
    setMorphFactor('Left_Double_windows_Middle', 'Left-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'left-windows-triple-1', true, function(event) {
  Left_middle_resizing = getHTMLElemAttribute('value', 'left-windows-triple-1', true);
  if (Left_middle_resizing == '120x254') {
    setMorphFactor('Left_Triple_windows_Middle', 'Triple_windows', -1.681159);
  }
  if (Left_middle_resizing == '120x304') {
    setMorphFactor('Left_Triple_windows_Middle', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'front-right-window', true, function(event) {
  setMorphFactor('Front_Triple_windows_right', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  Front_right_resizing = getHTMLElemAttribute('value', 'front-right-window', true);
  if (Front_right_resizing == 'Single') {
    changeVis('Front_Single_windows_right', true);
    changeVis('Front_Double_windows_right', false);
    changeVis('Front_Triple_windows_right', false);
  }
  if (Front_right_resizing == 'Double') {
    changeVis('Front_Double_windows_right', true);
    changeVis('Front_Single_windows_right', false);
    changeVis('Front_Triple_windows_right', false);
  }
  if (Front_right_resizing == 'Triple') {
    changeVis('Front_Triple_windows_right', true);
    changeVis('Front_Single_windows_right', false);
    changeVis('Front_Double_windows_right', false);
  }
});
eventHTMLElem('change', 'front-windows-single-2', true, function(event) {
  Front_right_resizing = getHTMLElemAttribute('value', 'front-windows-single-2', true);
  if (Front_right_resizing == '120x104') {
    setMorphFactor('Front_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_right', 'Single-windows-width-scale', -0.46);
  }
  if (Front_right_resizing == '120x124') {
    setMorphFactor('Front_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_right', 'Single-windows-width-scale', -0.12);
  }
  if (Front_right_resizing == '120x154') {
    setMorphFactor('Front_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_right', 'Single-windows-width-scale', 0.527343);
  }
  if (Front_right_resizing == '120x204') {
    setMorphFactor('Front_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_right', 'Single-windows-width-scale', 1.521739);
  }
  if (Front_right_resizing == '120x254') {
    setMorphFactor('Front_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Front_Single_windows_right', 'Single-windows-width-scale', 2.5);
  }
  if (Front_right_resizing == '200x94') {
    setMorphFactor('Front_Single_windows_right', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Front_Single_windows_right', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'front-windows-double-2', true, function(event) {
  Front_right_resizing = getHTMLElemAttribute('value', 'front-windows-double-2', true);
  if (Front_right_resizing == '120x194') {
    setMorphFactor('Front_Double_windows_right', 'Front-Double-windows-height-scale', 1.356522);
    setMorphFactor('Front_Double_windows_right', 'Front-Double-windows-width-scale', 0.830918);
  }
  if (Front_right_resizing == '120x204') {
    setMorphFactor('Front_Double_windows_right', 'Front-Double-windows-height-scale', 1.356522);
    setMorphFactor('Front_Double_windows_right', 'Front-Double-windows-width-scale', 1.043478);
  }
  if (Front_right_resizing == '90x154') {
    setMorphFactor('Front_Double_windows_right', 'Front-Double-windows-height-scale', 1.356522);
    setMorphFactor('Front_Double_windows_right', 'Front-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'front-windows-triple-2', true, function(event) {
  Front_right_resizing = getHTMLElemAttribute('value', 'front-windows-triple-2', true);
  if (Front_right_resizing == '120x254') {
    setMorphFactor('Front_Triple_windows_right', 'Triple_windows', -1.681159);
  }
  if (Front_right_resizing == '120x304') {
    setMorphFactor('Front_Triple_windows_right', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'back-right-window', true, function(event) {
  Back_right_resizing = getHTMLElemAttribute('value', 'back-right-window', true);
  if (Back_right_resizing == 'Single') {
    changeVis('Back_Single_windows_right', true);
    changeVis('Back_Double_windows_right', false);
    changeVis('Back_Triple_windows_right', false);
  }
  if (Back_right_resizing == 'Double') {
    changeVis('Back_Double_windows_right', true);
    changeVis('Back_Single_windows_right', false);
    changeVis('Back_Triple_windows_right', false);
  }
  if (Back_right_resizing == 'Triple') {
    changeVis('Back_Triple_windows_right', true);
    changeVis('Back_Single_windows_right', false);
    changeVis('Back_Double_windows_right', false);
  }
});
eventHTMLElem('change', 'back-windows-single-2', true, function(event) {
  Back_right_resizing = getHTMLElemAttribute('value', 'back-windows-single-2', true);
  if (Back_right_resizing == '120x104') {
    setMorphFactor('Back_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_right', 'Single-windows-width-scale', -0.46);
  }
  if (Back_right_resizing == '120x124') {
    setMorphFactor('Back_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_right', 'Single-windows-width-scale', -0.12);
  }
  if (Back_right_resizing == '120x154') {
    setMorphFactor('Back_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_right', 'Single-windows-width-scale', 0.527343);
  }
  if (Back_right_resizing == '120x204') {
    setMorphFactor('Back_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_right', 'Single-windows-width-scale', 1.521739);
  }
  if (Back_right_resizing == '120x254') {
    setMorphFactor('Back_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Back_Single_windows_right', 'Single-windows-width-scale', 2.5);
  }
  if (Back_right_resizing == '200x94') {
    setMorphFactor('Back_Single_windows_right', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Back_Single_windows_right', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'back-windows-double-2', true, function(event) {
  Back_right_resizing = getHTMLElemAttribute('value', 'back-windows-double-2', true);
  if (Back_right_resizing == '120x194') {
    setMorphFactor('Back_Double_windows_right', 'Back-Double-windows-height-scale', 1.356522);
    setMorphFactor('Back_Double_windows_right', 'Back-Double-windows-width-scale', 0.830918);
  }
  if (Back_right_resizing == '120x204') {
    setMorphFactor('Back_Double_windows_right', 'Back-Double-windows-height-scale', 1.356522);
    setMorphFactor('Back_Double_windows_right', 'Back-Double-windows-width-scale', 1.043478);
  }
  if (Back_right_resizing == '90x154') {
    setMorphFactor('Back_Double_windows_right', 'Back-Double-windows-height-scale', 1.356522);
    setMorphFactor('Back_Double_windows_right', 'Back-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'back-windows-triple-2', true, function(event) {
  Back_right_resizing = getHTMLElemAttribute('value', 'back-windows-triple-2', true);
  if (Back_right_resizing == '120x254') {
    setMorphFactor('Back_Triple_windows_right', 'Triple_windows', -1.681159);
  }
  if (Back_right_resizing == '120x304') {
    setMorphFactor('Back_Triple_windows_right', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'right-right-window', true, function(event) {
  Right_right_resizing = getHTMLElemAttribute('value', 'right-right-window', true);
  if (Right_right_resizing == 'Single') {
    changeVis('Right_Single_windows_right', true);
    changeVis('Right_Double_windows_right', false);
    changeVis('Right_Triple_windows_right', false);
  }
  if (Right_right_resizing == 'Double') {
    changeVis('Right_Double_windows_right', true);
    changeVis('Right_Single_windows_right', false);
    changeVis('Right_Triple_windows_right', false);
  }
  if (Right_right_resizing == 'Triple') {
    changeVis('Right_Triple_windows_right', true);
    changeVis('Right_Single_windows_right', false);
    changeVis('Right_Double_windows_right', false);
  }
});
eventHTMLElem('change', 'right-windows-single-2', true, function(event) {
  Right_right_resizing = getHTMLElemAttribute('value', 'right-windows-single-2', true);
  if (Back_right_resizing == '120x104') {
    setMorphFactor('Right_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_right', 'Single-windows-width-scale', -0.46);
  }
  if (Right_right_resizing == '120x124') {
    setMorphFactor('Right_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_right', 'Single-windows-width-scale', -0.12);
  }
  if (Right_right_resizing == '120x154') {
    setMorphFactor('Right_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_right', 'Single-windows-width-scale', 0.527343);
  }
  if (Right_right_resizing == '120x204') {
    setMorphFactor('Right_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_right', 'Single-windows-width-scale', 1.521739);
  }
  if (Right_right_resizing == '120x254') {
    setMorphFactor('Right_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Right_Single_windows_right', 'Single-windows-width-scale', 2.5);
  }
  if (Right_right_resizing == '200x94') {
    setMorphFactor('Right_Single_windows_right', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Right_Single_windows_right', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'right-windows-double-2', true, function(event) {
  Right_right_resizing = getHTMLElemAttribute('value', 'right-windows-double-2', true);
  if (Right_right_resizing == '120x194') {
    setMorphFactor('Right_Double_windows_right', 'Right-Double-windows-height-scale', 1.356522);
    setMorphFactor('Right_Double_windows_right', 'Right-Double-windows-width-scale', 0.830918);
  }
  if (Right_right_resizing == '120x204') {
    setMorphFactor('Right_Double_windows_right', 'Right-Double-windows-height-scale', 1.356522);
    setMorphFactor('Right_Double_windows_right', 'Right-Double-windows-width-scale', 1.043478);
  }
  if (Right_right_resizing == '90x154') {
    setMorphFactor('Right_Double_windows_right', 'Right-Double-windows-height-scale', 1.356522);
    setMorphFactor('Right_Double_windows_right', 'Right-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'right-windows-triple-2', true, function(event) {
  Right_right_resizing = getHTMLElemAttribute('value', 'right-windows-triple-2', true);
  if (Right_right_resizing == '120x254') {
    setMorphFactor('Right_Triple_windows_right', 'Triple_windows', -1.681159);
  }
  if (Right_right_resizing == '120x304') {
    setMorphFactor('Right_Triple_windows_right', 'Triple_windows', 0);
  }
});

eventHTMLElem('change', 'left-right-window', true, function(event) {
  Left_right_resizing = getHTMLElemAttribute('value', 'left-right-window', true);
  if (Left_right_resizing == 'Single') {
    changeVis('Left_Single_windows_right', true);
    changeVis('Left_Double_windows_right', false);
    changeVis('Left_Triple_windows_right', false);
  }
  if (Left_right_resizing == 'Double') {
    changeVis('Left_Double_windows_right', true);
    changeVis('Left_Single_windows_right', false);
    changeVis('Left_Triple_windows_right', false);
  }
  if (Left_right_resizing == 'Triple') {
    changeVis('Left_Triple_windows_right', true);
    changeVis('Left_Single_windows_right', false);
    changeVis('Left_Double_windows_right', false);
  }
});
eventHTMLElem('change', 'left-windows-single-2', true, function(event) {
  Left_right_resizing = getHTMLElemAttribute('value', 'left-windows-single-2', true);
  if (Left_right_resizing == '120x104') {
    setMorphFactor('Left_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_right', 'Single-windows-width-scale', -0.46);
  }
  if (Left_right_resizing == '120x124') {
    setMorphFactor('Left_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_right', 'Single-windows-width-scale', -0.12);
  }
  if (Left_right_resizing == '120x154') {
    setMorphFactor('Left_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_right', 'Single-windows-width-scale', 0.527343);
  }
  if (Left_right_resizing == '120x204') {
    setMorphFactor('Left_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_right', 'Single-windows-width-scale', 1.521739);
  }
  if (Left_right_resizing == '120x254') {
    setMorphFactor('Left_Single_windows_right', 'Single-windows-height-scale', 0);
    setMorphFactor('Left_Single_windows_right', 'Single-windows-width-scale', 2.5);
  }
  if (Left_right_resizing == '200x94') {
    setMorphFactor('Left_Single_windows_right', 'Single-windows-height-scale', 2.8);
    setMorphFactor('Left_Single_windows_right', 'Single-windows-width-scale', -0.65625);
  }
});
eventHTMLElem('change', 'left-windows-double-2', true, function(event) {
  Left_right_resizing = getHTMLElemAttribute('value', 'left-windows-double-2', true);
  if (Left_right_resizing == '120x194') {
    setMorphFactor('Left_Double_windows_right', 'Left-Double-windows-height-scale', 1.356522);
    setMorphFactor('Left_Double_windows_right', 'Left-Double-windows-width-scale', 0.830918);
  }
  if (Left_right_resizing == '120x204') {
    setMorphFactor('Left_Double_windows_right', 'Left-Double-windows-height-scale', 1.356522);
    setMorphFactor('Left_Double_windows_right', 'Left-Double-windows-width-scale', 1.043478);
  }
  if (Left_right_resizing == '90x154') {
    setMorphFactor('Left_Double_windows_right', 'Left-Double-windows-height-scale', 1.356522);
    setMorphFactor('Left_Double_windows_right', 'Left-Double-windows-width-scale', 0.038647);
  }
});
eventHTMLElem('change', 'left-windows-triple-2', true, function(event) {
  Left_right_resizing = getHTMLElemAttribute('value', 'left-windows-triple-2', true);
  if (Left_right_resizing == '120x254') {
    setMorphFactor('Left_Triple_windows_right', 'Triple_windows', -1.681159);
  }
  if (Left_right_resizing == '120x304') {
    setMorphFactor('Left_Triple_windows_right', 'Triple_windows', 0);
  }
});

Windows_doors = ['Front_Single_door_Middle', 'Front_Single_windows_Middle', 'Front_Triple_windows_Middle', null];

eventHTMLElem('click', 'share-twitter', true, function(event) {
  openWebPage(socialShareLink('TWITTER', 'Camping Manufaktur Build And Construct Awnings', 'Canopies, Wind Protection, Awnings And Much More On Demand For Every Long-term Camper'), 'NEW');
});

eventHTMLElem('change', 'front-left-door', true, function(event) {
  Front_left_resizing = getHTMLElemAttribute('value', 'front-left-door', true);
  if (Front_left_resizing == '200x64') {
    setMorphFactor('Front_Single_door_left', 'Single-door', 0);
    changeVis('Front_Single_door_frame_left', false);
  }
  if (Front_left_resizing == '200x94') {
    changeVis('Front_Single_door_frame_left', true);
    setMorphFactor('Front_Single_door_left', 'Single-door', 0.2);
  }
  if (Front_left_resizing == '200x124') {
    setMorphFactor('Front_Single_door_left', 'Single-door', 1.4);
    changeVis('Front_Single_door_frame_left', true);
  }
  if (Front_left_resizing == '200x200') {
    setMorphFactor('Front_Single_door_left', 'Single-door', 5.4);
    changeVis('Front_Single_door_frame_left', true);
  }
  if (Front_left_resizing == '200x204') {
    setMorphFactor('Front_Single_door_left', 'Single-door', 5.5);
    changeVis('Front_Single_door_frame_left', true);
  }
});

eventHTMLElem('change', 'back-left-door', true, function(event) {
  Back_left_resizing = getHTMLElemAttribute('value', 'back-left-door', true);
  if (Back_left_resizing == '200x64') {
    setMorphFactor('Back_Single_door_left', 'Single-door', 0);
    changeVis('Back_Single_door_frame_left', false);
  }
  if (Back_left_resizing == '200x94') {
    changeVis('Back_Single_door_frame_left', true);
    setMorphFactor('Back_Single_door_left', 'Single-door', 0.2);
  }
  if (Back_left_resizing == '200x124') {
    setMorphFactor('Back_Single_door_left', 'Single-door', 1.4);
    changeVis('Back_Single_door_frame_left', true);
  }
  if (Back_left_resizing == '200x200') {
    setMorphFactor('Back_Single_door_left', 'Single-door', 5.4);
    changeVis('Back_Single_door_frame_left', true);
  }
  if (Back_left_resizing == '200x204') {
    setMorphFactor('Back_Single_door_left', 'Single-door', 5.5);
    changeVis('Back_Single_door_frame_left', true);
  }
});

eventHTMLElem('change', 'right-left-door', true, function(event) {
  Right_left_resizing = getHTMLElemAttribute('value', 'right-left-door', true);
  if (Right_left_resizing == '200x64') {
    setMorphFactor('Right_Single_door_left', 'Single-door', 0);
    changeVis('Right_Single_door_frame_left', false);
  }
  if (Right_left_resizing == '200x94') {
    changeVis('Right_Single_door_frame_left', true);
    setMorphFactor('Right_Single_door_left', 'Single-door', 0.2);
  }
  if (Right_left_resizing == '200x124') {
    setMorphFactor('Right_Single_door_left', 'Single-door', 1.4);
    changeVis('Right_Single_door_frame_left', true);
  }
  if (Right_left_resizing == '200x200') {
    setMorphFactor('Right_Single_door_left', 'Single-door', 5.4);
    changeVis('Right_Single_door_frame_left', true);
  }
  if (Right_left_resizing == '200x204') {
    setMorphFactor('Right_Single_door_left', 'Single-door', 5.5);
    changeVis('Right_Single_door_frame_left', true);
  }
});

eventHTMLElem('change', 'left-left-door', true, function(event) {
  Left_left_resizing = getHTMLElemAttribute('value', 'left-left-door', true);
  if (Left_left_resizing == '200x64') {
    setMorphFactor('Left_Single_door_left', 'Single-door', 0);
    changeVis('Left_Single_door_frame_left', false);
  }
  if (Left_left_resizing == '200x94') {
    changeVis('Left_Single_door_frame_left', true);
    setMorphFactor('Left_Single_door_left', 'Single-door', 0.2);
  }
  if (Left_left_resizing == '200x124') {
    setMorphFactor('Left_Single_door_left', 'Single-door', 1.4);
    changeVis('Left_Single_door_frame_left', true);
  }
  if (Left_left_resizing == '200x200') {
    setMorphFactor('Left_Single_door_left', 'Single-door', 5.4);
    changeVis('Left_Single_door_frame_left', true);
  }
  if (Left_left_resizing == '200x204') {
    setMorphFactor('Left_Single_door_left', 'Single-door', 5.5);
    changeVis('Left_Single_door_frame_left', true);
  }
});

eventHTMLElem('change', 'front-middle-door-config', true, function(event) {
  Front_middle_resizing = getHTMLElemAttribute('value', 'front-middle-door-config', true);
  if (Front_middle_resizing == '200x64') {
    setMorphFactor('Front_Single_door_Middle', 'Single-door', 0);
    changeVis('Front_Single_door_frame_Middle', false);
  }
  if (Front_middle_resizing == '200x94') {
    changeVis('Front_Single_door_frame_Middle', true);
    setMorphFactor('Front_Single_door_Middle', 'Single-door', 0.2);
  }
  if (Front_middle_resizing == '200x124') {
    setMorphFactor('Front_Single_door_Middle', 'Single-door', 1.4);
    changeVis('Front_Single_door_frame_Middle', true);
  }
  if (Front_middle_resizing == '200x200') {
    setMorphFactor('Front_Single_door_Middle', 'Single-door', 5.4);
    changeVis('Front_Single_door_frame_Middle', true);
  }
  if (Front_middle_resizing == '200x204') {
    setMorphFactor('Front_Single_door_Middle', 'Single-door', 5.5);
    changeVis('Front_Single_door_frame_Middle', true);
  }
});

eventHTMLElem('change', 'back-middle-door-config', true, function(event) {
  Back_middle_resizing = getHTMLElemAttribute('value', 'back-middle-door-config', true);
  if (Back_middle_resizing == '200x64') {
    setMorphFactor('Back_Single_door_Middle', 'Single-door', 0);
    changeVis('Back_Single_door_frame_Middle', false);
  }
  if (Back_middle_resizing == '200x94') {
    changeVis('Back_Single_door_frame_Middle', true);
    setMorphFactor('Back_Single_door_Middle', 'Single-door', 0.2);
  }
  if (Back_middle_resizing == '200x124') {
    setMorphFactor('Back_Single_door_Middle', 'Single-door', 1.4);
    changeVis('Back_Single_door_frame_Middle', true);
  }
  if (Back_middle_resizing == '200x200') {
    setMorphFactor('Back_Single_door_Middle', 'Single-door', 5.4);
    changeVis('Back_Single_door_frame_Middle', true);
  }
  if (Back_middle_resizing == '200x204') {
    setMorphFactor('Back_Single_door_Middle', 'Single-door', 5.5);
    changeVis('Back_Single_door_frame_Middle', true);
  }
});

eventHTMLElem('change', 'right-middle-door-config', true, function(event) {
  Right_middle_resizing = getHTMLElemAttribute('value', 'right-middle-door-config', true);
  if (Right_middle_resizing == '200x64') {
    setMorphFactor('Right_Single_door_Middle', 'Single-door', 0);
    changeVis('Right_Single_door_frame_Middle', false);
  }
  if (Right_middle_resizing == '200x94') {
    changeVis('Right_Single_door_frame_Middle', true);
    setMorphFactor('Right_Single_door_Middle', 'Single-door', 0.2);
  }
  if (Right_middle_resizing == '200x124') {
    setMorphFactor('Right_Single_door_Middle', 'Single-door', 1.4);
    changeVis('Right_Single_door_frame_Middle', true);
  }
  if (Right_middle_resizing == '200x200') {
    setMorphFactor('Right_Single_door_Middle', 'Single-door', 5.4);
    changeVis('Right_Single_door_frame_Middle', true);
  }
  if (Right_middle_resizing == '200x204') {
    setMorphFactor('Right_Single_door_Middle', 'Single-door', 5.5);
    changeVis('Right_Single_door_frame_Middle', true);
  }
});

eventHTMLElem('change', 'left-middle-door-config', true, function(event) {
  Left_middle_resizing = getHTMLElemAttribute('value', 'left-middle-door-config', true);
  if (Left_middle_resizing == '200x64') {
    setMorphFactor('Left_Single_door_Middle', 'Single-door', 0);
    changeVis('Left_Single_door_frame_Middle', false);
  }
  if (Left_middle_resizing == '200x94') {
    changeVis('Left_Single_door_frame_Middle', true);
    setMorphFactor('Left_Single_door_Middle', 'Single-door', 0.2);
  }
  if (Left_middle_resizing == '200x124') {
    setMorphFactor('Left_Single_door_Middle', 'Single-door', 1.4);
    changeVis('Left_Single_door_frame_Middle', true);
  }
  if (Left_middle_resizing == '200x200') {
    setMorphFactor('Left_Single_door_Middle', 'Single-door', 5.4);
    changeVis('Left_Single_door_frame_Middle', true);
  }
  if (Left_middle_resizing == '200x204') {
    setMorphFactor('Left_Single_door_Middle', 'Single-door', 5.5);
    changeVis('Left_Single_door_frame_Middle', true);
  }
});

eventHTMLElem('pointerdown', ['CONTAINER'], false, function(event) {
  setHTMLElemStyle('display', 'none', 'control-3d', false);
});
registerOnClick(['ALL_OBJECTS'], function() {
  setHTMLElemStyle('display', 'none', 'control-3d', false);
}, function() {});

registerOnHover(['ALL_OBJECTS'], function() {
  setHTMLElemStyle('cursor', 'move', ['BODY'], false);
}, function() {
  setHTMLElemStyle('cursor', 'move', ['BODY'], false);
});

Environment = 0;
eventHTMLElem('input', 'enivrement-view', false, function(event) {
  Cravane = 'Caravane' + '';
  if (getHTMLElemAttribute('checked', 'checkbox1', false) == true && true) {
    Environment = 1;
    startPreloader();
    registerSetTimeout(0.1, function() {
      appendScene('caravane.gltf.xz', Cravane, false, false, function() {
        endPreloader();
        setObjTransform(Cravane, 'position', getHTMLElemAttribute('value', 'D-width', true) / -200 + 1.45, 0, 0, false);
      }, function() {
        updatePreloader(Math.round(_pGlob.percentage));
      });
    });
  } else {
    Environment = 0;
    unloadScene(Cravane);
  }
});

eventHTMLElem('click', 'take-screenshot', true, function(event) {
  tweenCamera('Camera-screenshot-3', 'Origine-camera', 0, function() {});
  registerSetTimeout(0.1, function() {
    setHTMLElemStyle('backgroundImage', ['url(',appInstance.renderer.domElement.toDataURL('image/png'),')'].join(''), 'screenshot-front', true);
    registerSetTimeout(0.1, function() {
      tweenCamera('Camera-screenshot-4', 'Origine-camera', 0, function() {});
      registerSetTimeout(0.1, function() {
        setHTMLElemStyle('backgroundImage', ['url(',appInstance.renderer.domElement.toDataURL('image/png'),')'].join(''), 'screenshot-back', true);
        registerSetTimeout(0.1, function() {
          tweenCamera('Camera-screenshot-2', 'Origine-camera', 0, function() {});
          registerSetTimeout(0.1, function() {
            setHTMLElemStyle('backgroundImage', ['url(',appInstance.renderer.domElement.toDataURL('image/png'),')'].join(''), 'screenshot-left', true);
            registerSetTimeout(0.1, function() {
              tweenCamera('Camera-screenshot-1', 'Origine-camera', 0, function() {});
              registerSetTimeout(0.1, function() {
                setHTMLElemStyle('backgroundImage', ['url(',appInstance.renderer.domElement.toDataURL('image/png'),')'].join(''), 'screenshot-right', true);
              });
            });
          });
        });
      });
    });
  });
});
eventHTMLElem('click', 'take-screenshot-1', true, function(event) {
  tweenCamera('Camera-screenshot-3', 'Origine-camera', 0, function() {});
  registerSetTimeout(0.1, function() {
    setHTMLElemStyle('backgroundImage', ['url(',appInstance.renderer.domElement.toDataURL('image/png'),')'].join(''), 'screenshot-front', true);
    registerSetTimeout(0.1, function() {
      tweenCamera('Camera-screenshot-4', 'Origine-camera', 0, function() {});
      registerSetTimeout(0.1, function() {
        setHTMLElemStyle('backgroundImage', ['url(',appInstance.renderer.domElement.toDataURL('image/png'),')'].join(''), 'screenshot-back', true);
        registerSetTimeout(0.1, function() {
          tweenCamera('Camera-screenshot-2', 'Origine-camera', 0, function() {});
          registerSetTimeout(0.1, function() {
            setHTMLElemStyle('backgroundImage', ['url(',appInstance.renderer.domElement.toDataURL('image/png'),')'].join(''), 'screenshot-left', true);
            registerSetTimeout(0.1, function() {
              tweenCamera('Camera-screenshot-1', 'Origine-camera', 0, function() {});
              registerSetTimeout(0.1, function() {
                setHTMLElemStyle('backgroundImage', ['url(',appInstance.renderer.domElement.toDataURL('image/png'),')'].join(''), 'screenshot-right', true);
              });
            });
          });
        });
      });
    });
  });
});

eventHTMLElem('click', '4cm-tickness', true, function(event) {
  setMorphFactor('Structure', 'Profile-thickness', 0);
  setMorphFactor('Stripe', 'Profile-thickness', 0);
  setMorphFactor('Wall', 'Profile-thickness', 0);
});
eventHTMLElem('click', '5cm-tickness', true, function(event) {
  setMorphFactor('Structure', 'Profile-thickness', 1);
  setMorphFactor('Stripe', 'Profile-thickness', 1);
  setMorphFactor('Wall', 'Profile-thickness', 1);
});

eventHTMLElem('input', 'stripe-height', true, function(event) {
  setMorphFactor('Wall', 'Stripe-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'stripe-height', true), 15, 150, 0, 10));
  setMorphFactor('Stripe', 'Stripe-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'stripe-height', true), 15, 150, 0, 10));
});

eventHTMLElem('click', 'siding-headingOne', true, function(event) {
  SINGLE_COLOR();
});
eventHTMLElem('click', 'siding-uni-grau', true, function(event) {
  SINGLE_COLOR();
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#dedfd9');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#dedfd9');
});
eventHTMLElem('click', 'siding-leinendruck-creme', true, function(event) {
  SINGLE_COLOR();
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#e3dcc0');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#e3dcc0');
});

eventHTMLElem('click', 'bottom-headingOne', true, function(event) {
  single_color_stripe();
});
eventHTMLElem('click', 'Stripe-grey', true, function(event) {
  single_color_stripe();
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#dedfd9');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#dedfd9');
});
eventHTMLElem('click', 'Stripe-blue', true, function(event) {
  single_color_stripe();
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#e3dcc0');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#e3dcc0');
});

eventHTMLElem('input', 'D-lenght', true, function(event) {
  setMaterialValue('mettalic-roof', 'Roof-scaling-lenght', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 100, 300, 0, 10));
  setMaterialValue('Siding-color-lenght', 'Siding-texture-scale', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 30, 100, 0, 10));
  setMaterialValue('Stripe-color-lenght', 'Siding-texture-scale', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 30, 100, 0, 10));
  setMorphFactor('Wall', 'Lenght', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Trim_Roof_End', 'Lenght', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Structure', 'Lenght', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Stripe', 'Lenght', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Roof', 'Lenght', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Single_door_Middle', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Single_door_frame_Middle', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Double_windows_Middle', 'Right-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Triple_windows_Middle', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Single_door_left', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Single_door_frame_left', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Single_windows_left', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Double_windows_left', 'Right-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Triple_windows_left', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Single_door_right', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Single_door_frame_right', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Single_windows_right', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Double_windows_right', 'Right-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Right_Triple_windows_right', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Single_door_Middle', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Single_door_frame_Middle', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Double_windows_Middle', 'Left-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Triple_windows_Middle', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Single_door_left', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Single_door_frame_left', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Single_windows_left', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Double_windows_left', 'Left-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Single_door_right', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Single_door_frame_right', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Single_windows_right', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
  setMorphFactor('Left_Double_windows_right', 'Left-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-lenght', true), 290, 1300, 0, 10));
});

eventHTMLElem('input', 'D-width', true, function(event) {
  setObjTransform(Cravane, 'position', getHTMLElemAttribute('value', 'D-width', true) / -200 + 1.45, 0, 0, false);
  setMaterialValue('Siding-color-width', 'Siding-texture-scale', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 30, 100, 0, 10));
  setMaterialValue('Stripe-color-width', 'Siding-texture-scale', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 30, 100, 0, 10));
  setMaterialValue('mettalic-roof', 'Roof-scaling-width', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 100, 300, 0, 10));
  setMorphFactor('Wall', 'Width', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Trim_Roof_End', 'Width', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Structure', 'Width', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Stripe', 'Width', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Roof', 'Width', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Single_door_Middle', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Single_door_frame_Middle', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Double_windows_Middle', 'Front-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Triple_windows_Middle', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Single_door_right', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Single_door_frame_right', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Single_windows_right', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Double_windows_right', 'Front-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Triple_windows_right', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Single_door_left', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Single_door_frame_left', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Single_windows_left', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Double_windows_left', 'Front-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Front_Triple_windows_left', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Single_door_Middle', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Single_door_frame_Middle', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Double_windows_Middle', 'Front-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Triple_windows_Middle', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Single_door_right', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Single_door_frame_right', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Single_windows_right', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Double_windows_right', 'Front-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Triple_windows_right', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Single_door_left', 'Single-door-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Single_door_frame_left', 'Double_door_cadre-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Single_windows_left', 'Single-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Double_windows_left', 'Front-Double-windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
  setMorphFactor('Back_Triple_windows_left', 'Triple_windows-width-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-width', true), 290, 1300, 0, 10));
});

eventHTMLElem('click', 'siding-headingTwo', true, function(event) {
  TRIPLE_COLOR();
});
eventHTMLElem('click', 'siding-anthrazit-dunkelgrau-mittelgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#cec6bb');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#3e403e');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#87847b');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#cec6bb');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#3e403e');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#87847b');
});
eventHTMLElem('click', 'siding-blau-weis-weinrot-mittelgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#ccc4b7');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#112243');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#881127');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#ccc4b7');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#112243');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#881127');
});
eventHTMLElem('click', 'siding-beige-rot-braun-helicreme', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#f7dfb9');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#291c13');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#dd203b');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#f7dfb9');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#291c13');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#dd203b');
});
eventHTMLElem('click', 'siding-anthrazit-weis-gelb-mittelgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#cec6bb');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#3e403e');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#87847b');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#cec6bb');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#3e403e');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#87847b');
});
eventHTMLElem('click', 'siding-dunkelgrau-weis-rot-mittelgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#bcbbb6');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#fcf5ef');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#a00117');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#bcbbb6');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#fcf5ef');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#a00117');
});
eventHTMLElem('click', 'siding-weinrot-creme-grau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#f4d4b7');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#720615');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#998675');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#f4d4b7');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#720615');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#998675');
});
eventHTMLElem('click', 'siding-dunkelbraun-orange-ocker-beige', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#edc7a0');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#2e241b');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#e18b34');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#edc7a0');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#2e241b');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#e18b34');
});
eventHTMLElem('click', 'siding-headingThree', true, function(event) {
  TRIPLE_COLOR();
});
eventHTMLElem('click', 'siding-uni-anthrazit-dunkelgrau-mittelgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#ccc4b8');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#434240');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#848079');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#ccc4b8');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#434240');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#848079');
});
eventHTMLElem('click', 'siding-blau-dunkelgrau-hellgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#f2e4d7');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#f2e4d7');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#0e2459');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#0e2459');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#7e7d7e');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#7e7d7e');
});
eventHTMLElem('click', 'siding-petrol-gelb-wasserblau-grauweis', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#e3dbd8');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#e3dbd8');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#0d2b47');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#0d2b47');
  setMaterialColor('Siding-color-lenght', 'Group Input 2', 0, 0, 0, '#397bdc');
  setMaterialColor('Siding-color-width', 'Group Input 2', 0, 0, 0, '#397bdc');
});
eventHTMLElem('click', 'siding-headingFour', true, function(event) {
  SINGLE_COLOR();
});
eventHTMLElem('click', 'siding-mittelgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#b9b0a7');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#b9b0a7');
});
eventHTMLElem('click', 'siding-dunkelgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#585d61');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#585d61');
});
eventHTMLElem('click', 'siding-dunkelbraun', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#3f2b20');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#3f2b20');
});
eventHTMLElem('click', 'siding-beige', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#d2b18e');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#d2b18e');
});
eventHTMLElem('click', 'siding-weinrot', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#5f090a');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#5f090a');
});
eventHTMLElem('click', 'siding-hellcreme', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#f4d6b0');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#f4d6b0');
});
eventHTMLElem('click', 'siding-blau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#0e1f4b');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#0e1f4b');
});
eventHTMLElem('click', 'siding-creme', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#f2d8bf');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#f2d8bf');
});
eventHTMLElem('click', 'siding-headingFive', true, function(event) {
  SINGLE_COLOR();
});
eventHTMLElem('click', 'siding-grauweis', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#f2eae7');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#f2eae7');
});
eventHTMLElem('click', 'siding-petrol', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#052739');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#052739');
});
eventHTMLElem('click', 'siding-uni-mittelgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#bbb4aa');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#bbb4aa');
});
eventHTMLElem('click', 'siding-anthrazit', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#393939');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#393939');
});
eventHTMLElem('click', 'siding-blau-1', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#0e2968');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#0e2968');
  setMaterialColor('Siding-color-lenght', 'Group Input 1', 0, 0, 0, '#0e2968');
  setMaterialColor('Siding-color-width', 'Group Input 1', 0, 0, 0, '#0e2968');
});
eventHTMLElem('click', 'siding-hellgrau', true, function(event) {
  setMaterialColor('Siding-color-lenght', 'Group Input 0', 0, 0, 0, '#dad1cc');
  setMaterialColor('Siding-color-width', 'Group Input 0', 0, 0, 0, '#dad1cc');
});

eventHTMLElem('click', 'bottom-headingTwo', true, function(event) {
  triple_color_stripe();
});
eventHTMLElem('click', 'Stripe-anthrazit-dunkelgrau-mittelgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#cec6bb');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#3e403e');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#87847b');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#cec6bb');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#3e403e');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#87847b');
});
eventHTMLElem('click', 'Stripe-blau-weis-weinrot-mittelgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#ccc4b7');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#112243');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#881127');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#ccc4b7');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#112243');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#881127');
});
eventHTMLElem('click', 'Stripe-beige-rot-braun-helicreme', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#f7dfb9');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#291c13');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#dd203b');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#f7dfb9');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#291c13');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#dd203b');
});
eventHTMLElem('click', 'Stripe-anthrazit-weis-gelb-mittelgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#cec6bb');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#3e403e');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#87847b');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#cec6bb');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#3e403e');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#87847b');
});
eventHTMLElem('click', 'Stripe-dunkelgrau-weis-rot-mittelgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#bcbbb6');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#fcf5ef');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#a00117');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#bcbbb6');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#fcf5ef');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#a00117');
});
eventHTMLElem('click', 'Stripe-weinrot-creme-grau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#f4d4b7');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#720615');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#998675');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#f4d4b7');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#720615');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#998675');
});
eventHTMLElem('click', 'Stripe-dunkelbraun-orange-ocker-beige', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#edc7a0');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#2e241b');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#e18b34');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#edc7a0');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#2e241b');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#e18b34');
});
eventHTMLElem('click', 'bottom-headingThree', true, function(event) {
  triple_color_stripe();
});
eventHTMLElem('click', 'Stripe-uni-anthrazit-dunkelgrau-mittelgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#ccc4b8');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#434240');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#848079');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#ccc4b8');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#434240');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#848079');
});
eventHTMLElem('click', 'Stripe-blau-dunkelgrau-hellgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#f2e4d7');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#f2e4d7');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#0e2459');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#0e2459');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#7e7d7e');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#7e7d7e');
});
eventHTMLElem('click', 'Stripe-petrol-gelb-wasserblau-grauweis', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#e3dbd8');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#e3dbd8');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#0d2b47');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#0d2b47');
  setMaterialColor('Stripe-color-lenght', 'Group Input 2', 0, 0, 0, '#397bdc');
  setMaterialColor('Stripe-color-width', 'Group Input 2', 0, 0, 0, '#397bdc');
});
eventHTMLElem('click', 'bottom-headingFour', true, function(event) {
  single_color_stripe();
});
eventHTMLElem('click', 'Stripe-mittelgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#b9b0a7');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#b9b0a7');
});
eventHTMLElem('click', 'Stripe-dunkelgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#585d61');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#585d61');
});
eventHTMLElem('click', 'Stripe-dunkelbraun', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#3f2b20');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#3f2b20');
});
eventHTMLElem('click', 'Stripe-beige', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#d2b18e');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#d2b18e');
});
eventHTMLElem('click', 'Stripe-weinrot', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#5f090a');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#5f090a');
});
eventHTMLElem('click', 'Stripe-hellcreme', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#f4d6b0');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#f4d6b0');
});
eventHTMLElem('click', 'Stripe-blau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#0e1f4b');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#0e1f4b');
});
eventHTMLElem('click', 'Stripe-creme', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#f2d8bf');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#f2d8bf');
});
eventHTMLElem('click', 'bottom-headingFive', true, function(event) {
  single_color_stripe();
});
eventHTMLElem('click', 'Stripe-grauweis', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#f2eae7');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#f2eae7');
});
eventHTMLElem('click', 'Stripe-petrol', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#052739');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#052739');
});
eventHTMLElem('click', 'Stripe-uni-mittelgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#bbb4aa');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#bbb4aa');
});
eventHTMLElem('click', 'Stripe-anthrazit', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#393939');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#393939');
});
eventHTMLElem('click', 'Stripe-blau-1', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#0e2968');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#0e2968');
  setMaterialColor('Stripe-color-lenght', 'Group Input 1', 0, 0, 0, '#0e2968');
  setMaterialColor('Stripe-color-width', 'Group Input 1', 0, 0, 0, '#0e2968');
});
eventHTMLElem('click', 'Stripe-hellgrau', true, function(event) {
  setMaterialColor('Stripe-color-lenght', 'Group Input 0', 0, 0, 0, '#dad1cc');
  setMaterialColor('Stripe-color-width', 'Group Input 0', 0, 0, 0, '#dad1cc');
});

eventHTMLElem('input', 'D-height', true, function(event) {
  setMorphFactor('Wall', 'Height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Structure', 'Height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Roof', 'Height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Trim_Roof_End', 'Height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Single_door_Middle', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Single_windows_Middle', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Double_windows_Middle', 'Front-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Triple_windows_Middle', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Single_door_right', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Single_windows_right', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Double_windows_right', 'Front-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Triple_windows_right', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Single_door_left', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Single_windows_left', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Double_windows_left', 'Front-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Front_Triple_windows_left', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Single_door_Middle', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Single_windows_Middle', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Double_windows_Middle', 'Front-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Triple_windows_Middle', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Single_door_left', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Single_windows_left', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Double_windows_left', 'Back-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Triple_windows_left', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Single_door_right', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Single_windows_right', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Double_windows_right', 'Back-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Back_Triple_windows_right', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Single_door_Middle', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Single_windows_Middle', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Double_windows_Middle', 'Right-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Triple_windows_Middle', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Single_door_right', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Single_windows_right', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Double_windows_right', 'Right-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Triple_windows_right', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Single_door_left', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Single_windows_left', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Double_windows_left', 'Right-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Right_Triple_windows_left', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Single_door_right', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Single_windows_right', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Double_windows_right', 'Left-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Triple_windows_right', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Single_door_Middle', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Single_windows_Middle', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Double_windows_Middle', 'Left-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Triple_windows_Middle', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Single_door_left', 'Single-door-height-move', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Single_windows_left', 'Single-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Double_windows_left', 'Left-Double-windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
  setMorphFactor('Left_Triple_windows_left', 'Triple_windows-height', getJSFunction('resizing')(getHTMLElemAttribute('value', 'D-height', true), 200, 500, 0, 6));
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
